{"version":3,"file":"css-camera.min.js","sources":["../src/Transform.ts","../src/utils/helper.ts","../src/constants/default.ts","../src/constants/math.ts","../src/Camera.ts","../src/constants/error.ts"],"sourcesContent":["import { vec3, quat } from 'gl-matrix';\n\nclass Transform {\n  private _position: vec3;\n  private _scale: vec3;\n  private _rotation: vec3;\n  private _perspective: number;\n\n  public get position() { return this._position; }\n  public get scale() { return this._scale; }\n  public get rotation() { return this._rotation; }\n  public get perspective() { return this._perspective; }\n\n  public get cameraCSS() {\n    const perspective = this._perspective;\n    const rotation = this._rotation;\n\n    // tslint:disable-next-line: max-line-length\n    return `translateZ(${perspective}px) rotateY(${rotation[1]}deg) rotateZ(${rotation[2]}deg) rotateX(${rotation[0]}deg)`;\n  }\n\n  public get worldCSS() {\n    const perspective = this._perspective;\n    const position = this._position;\n\n    return `translate3d(${-position[0]}px, ${-position[1]}px, ${-position[2] - perspective}px)`;\n  }\n\n  public set perspective(val: number) {\n    this._perspective = val;\n  }\n\n  constructor() {\n    this._position = vec3.create();\n    this._scale = vec3.fromValues(1, 1, 1);\n    this._rotation = vec3.create();\n    this._perspective = 0;\n  }\n\n  public translate(x: number, y: number, z: number) {\n    const transVec = vec3.fromValues(x, y, z);\n    const rotation = this._rotation;\n    const rotQuat = quat.create();\n    quat.fromEuler(rotQuat, rotation[0], rotation[1], rotation[2]);\n    quat.invert(rotQuat, rotQuat);\n    vec3.transformQuat(transVec, transVec, rotQuat);\n\n    vec3.add(this._position, this._position, transVec);\n  }\n\n  public absTranslate(x: number, y: number, z: number) {\n    vec3.add(this._position, this._position, vec3.fromValues(x, y, z));\n  }\n\n  public rotateX(deg: number) {\n    this._rotation[0] += deg;\n  }\n\n  public rotateY(deg: number) {\n    this._rotation[1] += deg;\n  }\n\n  public rotateZ(deg: number) {\n    this._rotation[2] += deg;\n  }\n}\n\nexport default Transform;\n","import { mat4 } from 'gl-matrix';\nimport { BASE_ELEMENT_NOT_EXIST, MUST_STRING_OR_ELEMENT } from '../constants/error';\nimport { Matrix4x4 } from '../types';\n\nexport const getElement = (el: string | HTMLElement): HTMLElement => {\n    if (typeof el === 'string') {\n        const queryResult = document.querySelector(el);\n        if (!queryResult) {\n            throw new Error(BASE_ELEMENT_NOT_EXIST);\n        }\n        return queryResult as HTMLElement;\n    } else if (el.nodeName && el.nodeType === 1) {\n        return el;\n    } else {\n        throw new Error(MUST_STRING_OR_ELEMENT);\n    }\n};\n\nexport function applyCSS(element: HTMLElement, cssObj: { [keys: string]: string }): void {\n  Object.keys(cssObj).forEach(property => {\n    (element.style as any)[property] = cssObj[property];\n  });\n}\n\nexport function getTransformMatrix(elStyle: CSSStyleDeclaration): mat4 {\n  const trVal = elStyle.getPropertyValue('transform');\n  const transformStr = /\\(((\\s|\\S)+)\\)/.exec(trVal);\n  const matrixVal = transformStr\n    ? transformStr[1].split(',').map(val => parseFloat(val)) as Matrix4x4\n    : [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1] as Matrix4x4;\n  const matrix = mat4.fromValues(...matrixVal);\n\n  return matrix;\n}\n\nexport function findIndex<T>(iterable: T[], callback: (el: T) => boolean): number {\n  for (let i = 0; i < iterable.length; i += 1) {\n    const element = iterable[i];\n    if (element && callback(element)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n// return [0, 1, ...., max - 1]\nexport function range(max: number): number[] {\n  const counterArray: number[] = [];\n  for (let i = 0; i < max; i += 1) {\n    counterArray[i] = i;\n  }\n  return counterArray;\n}\n\nexport function degToRad(deg: number): number {\n  return Math.PI * deg / 180;\n}\n","export default {\n  FOV: 50,\n  ORTHOGRAPHIC: false,\n  STYLE_VIEWPORT: {\n    width: '100%',\n    height: '100%',\n    'transform-style': 'preserve-3d',\n  },\n  CLASS: {\n    VIEWPORT: 'cc-viewport',\n    CAMERA: 'cc-camera',\n    WORLD: 'cc-world',\n  },\n};\n","import { Matrix4x4 } from '../types';\n\nexport const IdentityMatrix4x4: Matrix4x4 = [\n  1, 0, 0, 0,\n  0, 1, 0, 0,\n  0, 0, 1, 0,\n  0, 0, 0, 1,\n];\n","import { mat4 } from 'gl-matrix';\nimport Transform from './Transform';\nimport { getElement, applyCSS, getTransformMatrix, findIndex } from './utils/helper';\nimport DEFAULT from './constants/default';\nimport { Matrix4x4 } from './types';\nimport { IdentityMatrix4x4 } from './constants/math';\n\nabstract class Camera {\n  private _element: HTMLElement;\n  private _viewportEl: HTMLElement;\n  private _cameraEl: HTMLElement;\n  private _worldEl: HTMLElement;\n\n  private _transform: Transform;\n\n  public get transform() { return this._transform; }\n  public get element() { return this._element; }\n  public get viewportEl() { return this._viewportEl; }\n  public get cameraEl() { return this._cameraEl; }\n\n  constructor(el: string | HTMLElement) {\n    this._element = getElement(el);\n    this._transform = new Transform();\n\n    const element = this._element;\n    const viewport = document.createElement('div');\n    applyCSS(viewport, DEFAULT.STYLE_VIEWPORT);\n\n    const camera = viewport.cloneNode() as HTMLElement;\n    const world = viewport.cloneNode() as HTMLElement;\n\n    viewport.className = DEFAULT.CLASS.VIEWPORT;\n    camera.className = DEFAULT.CLASS.CAMERA;\n    world.className = DEFAULT.CLASS.WORLD;\n\n    camera.appendChild(world);\n    viewport.appendChild(camera);\n\n    this._viewportEl = viewport;\n    this._cameraEl = camera;\n    this._worldEl = world;\n\n    // EL's PARENT -> VIEWPORT -> CAMERA -> WORLD -> EL\n    element.parentElement!.insertBefore(viewport, element);\n    world.appendChild(element);\n  }\n\n  public focus(element: HTMLElement, worldMatrix: Matrix4x4 = IdentityMatrix4x4) {\n    const focusMatrix = this.getFocusMatrix(element, worldMatrix);\n\n    console.log(focusMatrix);\n  }\n\n  public getFocusMatrix(element: HTMLElement, worldMatrix: Matrix4x4 = IdentityMatrix4x4): mat4 {\n    const elements = [];\n    while (element) {\n      elements.push(element);\n      if (element === this._element) break;\n      element = element.parentElement!;\n    }\n\n    // Order by shallow to deep\n    elements.reverse();\n\n    const elStyles = elements.map(el => window.getComputedStyle(el));\n    // From this._element to element's first parent\n    // Find most element that transform-style is not preserve-3d\n    // As all childs of that element is affected by its matrix\n    const firstFlatIndex = findIndex(elStyles, style => style.transformStyle !== 'preserve-3d');\n    if (firstFlatIndex >= 0) {\n      elStyles.splice(firstFlatIndex + 1);\n    }\n\n    let matrix = mat4.fromValues(...worldMatrix);\n    elStyles.forEach(style => {\n      matrix = mat4.mul(matrix, matrix, getTransformMatrix(style)) ;\n    });\n\n    return matrix;\n  }\n\n  public setPerspective(val: number) {\n    applyCSS(this._viewportEl, { perspective: `${val}px` });\n    this._transform.perspective = val;\n    this.update();\n  }\n\n  public update() {\n    const transform = this._transform;\n\n    this._cameraEl.style.transform = transform.cameraCSS;\n    this._worldEl.style.transform = transform.worldCSS;\n  }\n}\n\nexport default Camera;\n","export const BASE_ELEMENT_NOT_EXIST = 'Base element doesn\\'t exist.';\nexport const MUST_STRING_OR_ELEMENT = 'Element should be provided in string or HTMLElement.';\n"],"names":["Object","this","_position","_scale","_rotation","_perspective","val","perspective","rotation","position","x","y","z","transVec","vec3","fromValues","rotQuat","quat","create","fromEuler","invert","transformQuat","add","deg","applyCSS","element","cssObj","keys","forEach","property","style","width","height","VIEWPORT","CAMERA","WORLD","IdentityMatrix4x4","el","_element","queryResult","document","querySelector","Error","nodeName","nodeType","getElement","_transform","Transform","viewport","createElement","DEFAULT","camera","cloneNode","world","className","appendChild","_viewportEl","_cameraEl","_worldEl","parentElement","insertBefore","worldMatrix","focusMatrix","getFocusMatrix","console","log","elements","push","reverse","elStyles","map","window","getComputedStyle","firstFlatIndex","iterable","callback","i","length","findIndex","transformStyle","splice","matrix","mat4","mul","elStyle","trVal","getPropertyValue","transformStr","exec","matrixVal","split","parseFloat","getTransformMatrix","update","transform","cameraCSS","worldCSS"],"mappings":"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"}