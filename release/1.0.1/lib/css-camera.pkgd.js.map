{"version":3,"file":"css-camera.pkgd.js","sources":["../node_modules/gl-matrix/esm/common.js","../node_modules/gl-matrix/esm/mat3.js","../node_modules/gl-matrix/esm/mat4.js","../node_modules/gl-matrix/esm/vec3.js","../node_modules/gl-matrix/esm/vec4.js","../node_modules/gl-matrix/esm/quat.js","../node_modules/gl-matrix/esm/quat2.js","../node_modules/gl-matrix/esm/vec2.js","../src/constants/error.ts","../src/utils/helper.ts","../src/utils/math.ts","../src/constants/default.ts","../src/CSSCamera.ts"],"sourcesContent":["/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Type} type Array type, such as Float32Array or Array\r\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}","import * as glMatrix from \"./common.js\";\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\n\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {mat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {mat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {mat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to translate\r\n * @param {vec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n;\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\r\n* Calculates a 3x3 matrix from the given quaternion\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {quat} q Quaternion to create matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\r\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {mat4} a Mat4 to derive the normal matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {mat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {mat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2));\n}\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {mat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {mat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {vec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {quat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {mat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\nexport function getRotation(out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  var trace = mat[0] + mat[5] + mat[10];\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S;\n    out[2] = (mat[1] - mat[4]) / S;\n  } else if (mat[0] > mat[5] && mat[0] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S;\n    out[2] = (mat[8] + mat[2]) / S;\n  } else if (mat[5] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S;\n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S;\n  } else {\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @param {vec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\nexport function perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n;\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {mat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {mat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));\n}\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateX(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateY(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateZ(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var tempA = fromValues(a[0], a[1], a[2]);\n  var tempB = fromValues(b[0], b[1], b[2]);\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n  var cosine = dot(tempA, tempB);\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\n\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {vec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the source vector\r\n * @returns {vec4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to floor\r\n * @returns {vec4} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to round\r\n * @returns {vec4} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to negate\r\n * @returns {vec4} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to invert\r\n * @returns {vec4} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\r\n * Returns the cross-product of three vectors in a 4-dimensional space\r\n *\r\n * @param {vec4} result the receiving vector\r\n * @param {vec4} U the first vector\r\n * @param {vec4} V the second vector\r\n * @param {vec4} W the third vector\r\n * @returns {vec4} result\r\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n;\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to zero\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @returns {vec4} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\r\n * Quaternion\r\n * @module quat\r\n */\n\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {vec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {quat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\r\n * Generates a random quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {mat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {quat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var clone = vec4.clone;\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var fromValues = vec4.fromValues;\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var copy = vec4.copy;\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var set = vec4.set;\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var add = vec4.add;\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {quat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var scale = vec4.scale;\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nexport var dot = vec4.dot;\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var lerp = vec4.lerp;\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {quat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport var length = vec4.length;\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {quat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var normalize = vec4.normalize;\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat} a The first quaternion.\r\n * @param {quat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat} a The first vector.\r\n * @param {quat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var equals = vec4.equals;\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {vec3} a the initial vector\r\n * @param {vec3} b the destination vector\r\n * @returns {quat} out\r\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {quat} c the third operand\r\n * @param {quat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {vec3} view  the vector representing the viewing direction\r\n * @param {vec3} right the vector representing the local \"right\" direction\r\n * @param {vec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as quat from \"./quat.js\";\nimport * as mat4 from \"./mat4.js\";\n/**\r\n * Dual Quaternion<br>\r\n * Format: [real, dual]<br>\r\n * Quaternion format: XYZW<br>\r\n * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>\r\n * @module quat2\r\n */\n\n/**\r\n * Creates a new identity dual quat\r\n *\r\n * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]\r\n */\n\nexport function create() {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    dq[0] = 0;\n    dq[1] = 0;\n    dq[2] = 0;\n    dq[4] = 0;\n    dq[5] = 0;\n    dq[6] = 0;\n    dq[7] = 0;\n  }\n\n  dq[3] = 1;\n  return dq;\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat2} a dual quaternion to clone\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function clone(a) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = a[0];\n  dq[1] = a[1];\n  dq[2] = a[2];\n  dq[3] = a[3];\n  dq[4] = a[4];\n  dq[5] = a[5];\n  dq[6] = a[6];\n  dq[7] = a[7];\n  return dq;\n}\n/**\r\n * Creates a new dual quat initialized with the given values\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  dq[4] = x2;\n  dq[5] = y2;\n  dq[6] = z2;\n  dq[7] = w2;\n  return dq;\n}\n/**\r\n * Creates a new dual quat from the given values (quat and translation)\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component (translation)\r\n * @param {Number} y2 Y component (translation)\r\n * @param {Number} z2 Z component (translation)\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  var ax = x2 * 0.5,\n      ay = y2 * 0.5,\n      az = z2 * 0.5;\n  dq[4] = ax * w1 + ay * z1 - az * y1;\n  dq[5] = ay * w1 + az * x1 - ax * z1;\n  dq[6] = az * w1 + ax * y1 - ay * x1;\n  dq[7] = -ax * x1 - ay * y1 - az * z1;\n  return dq;\n}\n/**\r\n * Creates a dual quat from a quaternion and a translation\r\n *\r\n * @param {quat2} dual quaternion receiving operation result\r\n * @param {quat} q quaternion\r\n * @param {vec3} t tranlation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromRotationTranslation(out, q, t) {\n  var ax = t[0] * 0.5,\n      ay = t[1] * 0.5,\n      az = t[2] * 0.5,\n      bx = q[0],\n      by = q[1],\n      bz = q[2],\n      bw = q[3];\n  out[0] = bx;\n  out[1] = by;\n  out[2] = bz;\n  out[3] = bw;\n  out[4] = ax * bw + ay * bz - az * by;\n  out[5] = ay * bw + az * bx - ax * bz;\n  out[6] = az * bw + ax * by - ay * bx;\n  out[7] = -ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Creates a dual quat from a translation\r\n *\r\n * @param {quat2} dual quaternion receiving operation result\r\n * @param {vec3} t translation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromTranslation(out, t) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = t[0] * 0.5;\n  out[5] = t[1] * 0.5;\n  out[6] = t[2] * 0.5;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Creates a dual quat from a quaternion\r\n *\r\n * @param {quat2} dual quaternion receiving operation result\r\n * @param {quat} q the quaternion\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromRotation(out, q) {\n  out[0] = q[0];\n  out[1] = q[1];\n  out[2] = q[2];\n  out[3] = q[3];\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Creates a new dual quat from a matrix (4x4)\r\n *\r\n * @param {quat2} out the dual quaternion\r\n * @param {mat4} a the matrix\r\n * @returns {quat2} dual quat receiving operation result\r\n * @function\r\n */\n\nexport function fromMat4(out, a) {\n  //TODO Optimize this\n  var outer = quat.create();\n  mat4.getRotation(outer, a);\n  var t = new glMatrix.ARRAY_TYPE(3);\n  mat4.getTranslation(t, a);\n  fromRotationTranslation(out, outer, t);\n  return out;\n}\n/**\r\n * Copy the values from one dual quat to another\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the source dual quaternion\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\r\n * Set a dual quat to the identity dual quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @returns {quat2} out\r\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Set the components of a dual quat to the given values\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {\n  out[0] = x1;\n  out[1] = y1;\n  out[2] = z1;\n  out[3] = w1;\n  out[4] = x2;\n  out[5] = y2;\n  out[6] = z2;\n  out[7] = w2;\n  return out;\n}\n/**\r\n * Gets the real part of a dual quat\r\n * @param  {quat} out real part\r\n * @param  {quat2} a Dual Quaternion\r\n * @return {quat} real part\r\n */\n\nexport var getReal = quat.copy;\n/**\r\n * Gets the dual part of a dual quat\r\n * @param  {quat} out dual part\r\n * @param  {quat2} a Dual Quaternion\r\n * @return {quat} dual part\r\n */\n\nexport function getDual(out, a) {\n  out[0] = a[4];\n  out[1] = a[5];\n  out[2] = a[6];\n  out[3] = a[7];\n  return out;\n}\n/**\r\n * Set the real component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {quat} q a quaternion representing the real part\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport var setReal = quat.copy;\n/**\r\n * Set the dual component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {quat} q a quaternion representing the dual part\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function setDual(out, q) {\n  out[4] = q[0];\n  out[5] = q[1];\n  out[6] = q[2];\n  out[7] = q[3];\n  return out;\n}\n/**\r\n * Gets the translation of a normalized dual quat\r\n * @param  {vec3} out translation\r\n * @param  {quat2} a Dual Quaternion to be decomposed\r\n * @return {vec3} translation\r\n */\n\nexport function getTranslation(out, a) {\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3];\n  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  return out;\n}\n/**\r\n * Translates a dual quat by the given vector\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {quat2} out\r\n */\n\nexport function translate(out, a, v) {\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3],\n      bx1 = v[0] * 0.5,\n      by1 = v[1] * 0.5,\n      bz1 = v[2] * 0.5,\n      ax2 = a[4],\n      ay2 = a[5],\n      az2 = a[6],\n      aw2 = a[7];\n  out[0] = ax1;\n  out[1] = ay1;\n  out[2] = az1;\n  out[3] = aw1;\n  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\n  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\n  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\n  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the X axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateX(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the Y axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateY(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the Z axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateZ(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat by a given quaternion (a * q)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {quat} q quaternion to rotate by\r\n * @returns {quat2} out\r\n */\n\nexport function rotateByQuatAppend(out, a, q) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  out[0] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[1] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[2] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[3] = aw * qw - ax * qx - ay * qy - az * qz;\n  ax = a[4];\n  ay = a[5];\n  az = a[6];\n  aw = a[7];\n  out[4] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[5] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[6] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[7] = aw * qw - ax * qx - ay * qy - az * qz;\n  return out;\n}\n/**\r\n * Rotates a dual quat by a given quaternion (q * a)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat} q quaternion to rotate by\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @returns {quat2} out\r\n */\n\nexport function rotateByQuatPrepend(out, q, a) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      bx = a[0],\n      by = a[1],\n      bz = a[2],\n      bw = a[3];\n  out[0] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[1] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[2] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[3] = qw * bw - qx * bx - qy * by - qz * bz;\n  bx = a[4];\n  by = a[5];\n  bz = a[6];\n  bw = a[7];\n  out[4] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[5] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[6] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[7] = qw * bw - qx * bx - qy * by - qz * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around a given axis. Does the normalisation automatically\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {vec3} axis the axis to rotate around\r\n * @param {Number} rad how far the rotation should be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateAroundAxis(out, a, axis, rad) {\n  //Special case for rad = 0\n  if (Math.abs(rad) < glMatrix.EPSILON) {\n    return copy(out, a);\n  }\n\n  var axisLength = Math.sqrt(axis[0] * axis[0] + axis[1] * axis[1] + axis[2] * axis[2]);\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  var bx = s * axis[0] / axisLength;\n  var by = s * axis[1] / axisLength;\n  var bz = s * axis[2] / axisLength;\n  var bw = Math.cos(rad);\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3];\n  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  out[4] = ax * bw + aw * bx + ay * bz - az * by;\n  out[5] = ay * bw + aw * by + az * bx - ax * bz;\n  out[6] = az * bw + aw * bz + ax * by - ay * bx;\n  out[7] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Adds two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  return out;\n}\n/**\r\n * Multiplies two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @returns {quat2} out\r\n */\n\nexport function multiply(out, a, b) {\n  var ax0 = a[0],\n      ay0 = a[1],\n      az0 = a[2],\n      aw0 = a[3],\n      bx1 = b[4],\n      by1 = b[5],\n      bz1 = b[6],\n      bw1 = b[7],\n      ax1 = a[4],\n      ay1 = a[5],\n      az1 = a[6],\n      aw1 = a[7],\n      bx0 = b[0],\n      by0 = b[1],\n      bz0 = b[2],\n      bw0 = b[3];\n  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\n  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\n  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\n  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\n  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;\n  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;\n  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;\n  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;\n  return out;\n}\n/**\r\n * Alias for {@link quat2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Scales a dual quat by a scalar number\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {quat2} a the dual quat to scale\r\n * @param {Number} b amount to scale the dual quat by\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  return out;\n}\n/**\r\n * Calculates the dot product of two dual quat's (The dot product of the real parts)\r\n *\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nexport var dot = quat.dot;\n/**\r\n * Performs a linear interpolation between two dual quats's\r\n * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat2} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var mt = 1 - t;\n  if (dot(a, b) < 0) t = -t;\n  out[0] = a[0] * mt + b[0] * t;\n  out[1] = a[1] * mt + b[1] * t;\n  out[2] = a[2] * mt + b[2] * t;\n  out[3] = a[3] * mt + b[3] * t;\n  out[4] = a[4] * mt + b[4] * t;\n  out[5] = a[5] * mt + b[5] * t;\n  out[6] = a[6] * mt + b[6] * t;\n  out[7] = a[7] * mt + b[7] * t;\n  return out;\n}\n/**\r\n * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a dual quat to calculate inverse of\r\n * @returns {quat2} out\r\n */\n\nexport function invert(out, a) {\n  var sqlen = squaredLength(a);\n  out[0] = -a[0] / sqlen;\n  out[1] = -a[1] / sqlen;\n  out[2] = -a[2] / sqlen;\n  out[3] = a[3] / sqlen;\n  out[4] = -a[4] / sqlen;\n  out[5] = -a[5] / sqlen;\n  out[6] = -a[6] / sqlen;\n  out[7] = a[7] / sqlen;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a dual quat\r\n * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {quat2} a quat to calculate conjugate of\r\n * @returns {quat2} out\r\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  out[4] = -a[4];\n  out[5] = -a[5];\n  out[6] = -a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\r\n * Calculates the length of a dual quat\r\n *\r\n * @param {quat2} a dual quat to calculate length of\r\n * @returns {Number} length of a\r\n * @function\r\n */\n\nexport var length = quat.length;\n/**\r\n * Alias for {@link quat2.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Calculates the squared length of a dual quat\r\n *\r\n * @param {quat2} a dual quat to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nexport var squaredLength = quat.squaredLength;\n/**\r\n * Alias for {@link quat2.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Normalize a dual quat\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a dual quaternion to normalize\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function normalize(out, a) {\n  var magnitude = squaredLength(a);\n\n  if (magnitude > 0) {\n    magnitude = Math.sqrt(magnitude);\n    var a0 = a[0] / magnitude;\n    var a1 = a[1] / magnitude;\n    var a2 = a[2] / magnitude;\n    var a3 = a[3] / magnitude;\n    var b0 = a[4];\n    var b1 = a[5];\n    var b2 = a[6];\n    var b3 = a[7];\n    var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n    out[4] = (b0 - a0 * a_dot_b) / magnitude;\n    out[5] = (b1 - a1 * a_dot_b) / magnitude;\n    out[6] = (b2 - a2 * a_dot_b) / magnitude;\n    out[7] = (b3 - a3 * a_dot_b) / magnitude;\n  }\n\n  return out;\n}\n/**\r\n * Returns a string representation of a dual quatenion\r\n *\r\n * @param {quat2} a dual quaternion to represent as a string\r\n * @returns {String} string representation of the dual quat\r\n */\n\nexport function str(a) {\n  return 'quat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ')';\n}\n/**\r\n * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat2} a the first dual quaternion.\r\n * @param {quat2} b the second dual quaternion.\r\n * @returns {Boolean} true if the dual quaternions are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];\n}\n/**\r\n * Returns whether or not the dual quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat2} a the first dual quat.\r\n * @param {quat2} b the second dual quat.\r\n * @returns {Boolean} true if the dual quats are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7));\n}","import * as glMatrix from \"./common.js\";\n/**\r\n * 2 Dimensional Vector\r\n * @module vec2\r\n */\n\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {vec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the source vector\r\n * @returns {vec2} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to ceil\r\n * @returns {vec2} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to floor\r\n * @returns {vec2} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to round\r\n * @returns {vec2} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\r\n * Adds two vec2's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to negate\r\n * @returns {vec2} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to invert\r\n * @returns {vec2} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\r\n * Computes the cross product of two vec2's\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec2} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\r\n * Rotate a 2D vector\r\n * @param {vec2} out The receiving vec2\r\n * @param {vec2} a The vec2 point to rotate\r\n * @param {vec2} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec2} out\r\n */\n\nexport function rotate(out, a, b, c) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(c),\n      cosC = Math.cos(c); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\r\n * Get the angle between two 2D vectors\r\n * @param {vec2} a The first operand\r\n * @param {vec2} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1];\n  var len1 = x1 * x1 + y1 * y1;\n\n  if (len1 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len1 = 1 / Math.sqrt(len1);\n  }\n\n  var len2 = x2 * x2 + y2 * y2;\n\n  if (len2 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len2 = 1 / Math.sqrt(len2);\n  }\n\n  var cosine = (x1 * x2 + y1 * y2) * len1 * len2;\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec2 to zero\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @returns {vec2} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec2} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\n}\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\r\n * Alias for {@link vec2.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec2.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec2.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec2.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec2.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec2.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();","export const ELEMENT_NOT_EXIST = (selector: string) => `Element with selector \"${selector}\" doesn't exist.`;\nexport const MUST_STRING_OR_ELEMENT = (received: any) => `Element should be provided in string or HTMLElement. Received: ${received}`;\n","import { mat4, vec3 } from 'gl-matrix';\nimport { ELEMENT_NOT_EXIST, MUST_STRING_OR_ELEMENT } from '../constants/error';\nimport { Matrix4x4, Offset } from '../types';\n\nexport const getElement = (el: string | HTMLElement, baseElement?: HTMLElement): HTMLElement => {\n    if (typeof el === 'string') {\n        const queryResult = baseElement\n          ? baseElement.querySelector(el)\n          : document.querySelector(el);\n        if (!queryResult) {\n            throw new Error(ELEMENT_NOT_EXIST(el));\n        }\n        return queryResult as HTMLElement;\n    } else if (el.nodeName && el.nodeType === 1) {\n        return el;\n    } else {\n        throw new Error(MUST_STRING_OR_ELEMENT(el));\n    }\n};\n\nexport function applyCSS(element: HTMLElement, cssObj: { [keys: string]: string }): void {\n  Object.keys(cssObj).forEach(property => {\n    (element.style as any)[property] = cssObj[property];\n  });\n}\n\nexport function getTransformMatrix(elStyle: CSSStyleDeclaration): mat4 {\n  const trVal = elStyle.getPropertyValue('transform');\n  const transformStr = /\\(((\\s|\\S)+)\\)/.exec(trVal);\n  const matrixVal = transformStr\n    ? transformStr[1].split(',').map(val => parseFloat(val)) as Matrix4x4\n    : [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1] as Matrix4x4;\n  if (matrixVal.length === 16 ) {\n    return mat4.fromValues(...matrixVal);\n  } else {\n    // Convert 2d matrix(length 6) to 3d\n    const matrix = mat4.create();\n    mat4.identity(matrix);\n\n    matrix[0] = matrixVal[0];\n    matrix[1] = matrixVal[1];\n    matrix[4] = matrixVal[2];\n    matrix[5] = matrixVal[3];\n    matrix[12] = matrixVal[4];\n    matrix[13] = matrixVal[5];\n\n    return matrix;\n  }\n}\n\nexport function getOffsetFromParent(currentOffset: Offset, parentOffset: Offset): vec3 {\n  const offsetLeft = currentOffset.left + (currentOffset.width - parentOffset.width) / 2;\n  const offsetTop = currentOffset.top + (currentOffset.height - parentOffset.height) / 2;\n\n  return vec3.fromValues(offsetLeft, offsetTop, 0);\n}\n\nexport function getRotateOffset(elStyle: CSSStyleDeclaration, currentOffset: Offset): vec3 {\n  const axis = (elStyle.transformOrigin as string)\n    .split(' ')\n    .map(str => parseFloat(str.substring(0, str.length - 2)));\n  const ax = axis[0] - currentOffset.width / 2;\n  const ay = axis[1] - currentOffset.height / 2;\n\n  return vec3.fromValues(ax, ay, 0);\n}\n\nexport function findIndex<T>(iterable: T[], callback: (el: T) => boolean): number {\n  for (let i = 0; i < iterable.length; i += 1) {\n    const element = iterable[i];\n    if (element && callback(element)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n// return [0, 1, ...., max - 1]\nexport function range(max: number): number[] {\n  const counterArray: number[] = [];\n  for (let i = 0; i < max; i += 1) {\n    counterArray[i] = i;\n  }\n  return counterArray;\n}\n\nexport function clamp(val: number, min: number, max: number): number {\n  return Math.max(Math.min(val, max), min);\n}\n\nexport function assign(target: object, ...srcs: object[]): object {\n  srcs.forEach(source => {\n    Object.keys(source).forEach(key => {\n      const value = (source as any)[key];\n      (target as any)[key] = value;\n    });\n  });\n\n  return target;\n}\n","import { mat4, quat, vec3 } from 'gl-matrix';\nimport { clamp } from './helper';\n\nexport function degToRad(deg: number): number {\n  return Math.PI * deg / 180;\n}\n\nexport function radToDeg(rad: number): number {\n  return 180 * rad / Math.PI;\n}\n\n// From Three.js https://github.com/mrdoob/three.js/blob/dev/src/math/Euler.js\nexport function quatToEuler(q: quat): vec3 {\n  const rotM = mat4.create();\n  mat4.fromQuat(rotM, q);\n\n  const m11 = rotM[0];\n  const m12 = rotM[4];\n  // const m13 = rotM[8];\n  const m21 = rotM[1];\n  const m22 = rotM[5];\n  // const m23 = rotM[9];\n  const m31 = rotM[2];\n  const m32 = rotM[6];\n  const m33 = rotM[10];\n\n  const euler = vec3.create();\n\n  // ZYX\n  euler[1] = Math.asin(-clamp(m31, -1, 1));\n  if (Math.abs(m31) < 0.99999) {\n    euler[0] = Math.atan2(m32, m33);\n    euler[2] = Math.atan2(m21, m11);\n  } else {\n    euler[0] = 0;\n    euler[2] = Math.atan2(-m12, m22);\n  }\n\n  return euler.map(val => radToDeg(val)) as vec3;\n}\n","export const STYLE = {\n  VIEWPORT: {\n    width: '100%',\n    height: '100%',\n    'transform-style': 'preserve-3d',\n    overflow: 'hidden',\n  },\n  CAMERA: {\n    width: '100%',\n    height: '100%',\n    'transform-style': 'preserve-3d',\n    'will-change': 'transform',\n  },\n  WORLD: {\n    width: '100%',\n    height: '100%',\n    'transform-style': 'preserve-3d',\n    'will-change': 'transform',\n  },\n};\n\nexport const CLASS = {\n  VIEWPORT: 'cc-viewport',\n  CAMERA: 'cc-camera',\n  WORLD: 'cc-world',\n};\n\nexport const OPTIONS = {\n  position: [0, 0, 0],\n  scale: [1, 1, 1],\n  rotation: [0, 0, 0],\n  perspective: 0,\n  rotateOffset: 0,\n};\n\nexport const UPDATE_OPTIONS = {\n  property: 'transform',\n  timingFunction: 'ease-out',\n  delay: '0ms',\n};\n","import { mat4, vec3, quat } from 'gl-matrix';\nimport { getElement, applyCSS, getTransformMatrix, findIndex, getOffsetFromParent, getRotateOffset, assign } from './utils/helper';\nimport { quatToEuler } from './utils/math';\nimport * as DEFAULT from './constants/default';\nimport { Offset, UpdateOption, ValueOf, Options } from './types';\n\nclass CSSCamera {\n  private _element: HTMLElement;\n  private _viewportEl: HTMLElement;\n  private _cameraEl: HTMLElement;\n  private _worldEl: HTMLElement;\n\n  private _position: vec3;\n  private _scale: vec3;\n  private _rotation: vec3;\n  private _perspective: number;\n  private _rotateOffset: number;\n  private _updateTimer: number;\n\n  /**\n   * Current version of CSSCamera.\n   * @example\n   * console.log(CSSCamera.VERSION); // ex) 1.0.0\n   * @type {string}\n   */\n  static get VERSION() { return '#__VERSION__#'; }\n\n  /**\n   * The element provided in the constructor.\n   * @example\n   * const camera = new CSSCamera(el);\n   * console.log(camera.element === el); // true\n   * @type {HTMLElement}\n   */\n  public get element() { return this._element; }\n\n  /**\n   * The reference of viewport DOM element.\n   * @type {HTMLElement}\n   */\n  public get viewportEl() { return this._viewportEl; }\n\n  /**\n   * The reference of camera DOM element.\n   * @type {HTMLElement}\n   */\n  public get cameraEl() { return this._cameraEl; }\n\n  /**\n   * The reference of world DOM element.\n   * @type {HTMLElement}\n   */\n  public get worldEl() { return this._worldEl; }\n\n  /**\n   * The current position as number array([x, y, z]).\n   * @example\n   * const camera = new CSSCamera(el);\n   * console.log(camera.position); // [0, 0, 0];\n   * camera.position = [0, 0, 300];\n   * console.log(camera.position); // [0, 0, 300];\n   * @type {number[]}\n   */\n  public get position() { return [...this._position]; }\n\n  /**\n   * The current scale as number array([x, y, z]).\n   * @example\n   * const camera = new CSSCamera(el);\n   * console.log(camera.scale); // [1, 1, 1];\n   * camera.scale = [5, 1, 1];\n   * console.log(camera.scale); // [5, 1, 1];\n   * @type {number[]}\n   */\n  public get scale() { return [...this._scale]; }\n\n  /**\n   * The current Euler rotation angles in degree as number array([x, y, z]).\n   * @example\n   * const camera = new CSSCamera(el);\n   * console.log(camera.rotation); // [0, 0, 0];\n   * camera.rotation = [90, 0, 0];\n   * console.log(camera.rotation); // [90, 0, 0];\n   * @type {number[]}\n   */\n  public get rotation() { return [...this._rotation]; }\n\n  /**\n   * The current quaternion rotation as number array([x, y, z, w]).\n   * @example\n   * const camera = new CSSCamera(el);\n   * console.log(camera.quaternion); // [0, 0, 0, 1];\n   * camera.rotation = [90, 0, 0];\n   * console.log(camera.quaternion); // [0.7071067690849304, 0, 0, 0.7071067690849304];\n   * camera.quaternion = [0, 0, 0, 1];\n   * console.log(camera.rotation); // [0, -0, 0];\n   * @type {number[]}\n   */\n  public get quaternion() {\n    const r = this._rotation;\n    const quaternion = quat.fromEuler(quat.create(), r[0], r[1], r[2]);\n\n    return [...quaternion];\n  }\n\n  /**\n   * The current perspective value that will be applied to viewport element.\n   * @example\n   * const camera = new CSSCamera(el);\n   * camera.perspective = 300;\n   * console.log(camera.perspective); // 300\n   * @type {number}\n   */\n  public get perspective() { return this._perspective; }\n\n  /**\n   * The current rotate offset value that will be applied to camera element.\n   * The camera will be as far away from the focal point as this value.\n   * |![rot0](https://woodneck.github.io/css-camera/asset/rot0.gif)|![rot150](https://woodneck.github.io/css-camera/asset/rot150.gif)|\n   * |:---:|:---:|\n   * @example\n   * const camera = new CSSCamera(el);\n   * camera.perspective = 300;\n   * console.log(camera.cameraCSS); // scale3d(1, 1, 1) translateZ(300px) rotateX(0deg) rotateY(0deg) rotateZ(0deg);\n   * camera.rotateOffset = 100;\n   * console.log(camera.cameraCSS); // scale3d(1, 1, 1) translateZ(400px) rotateX(0deg) rotateY(0deg) rotateZ(0deg);\n   * @type {number}\n   */\n  public get rotateOffset() { return this._rotateOffset; }\n\n  /**\n   * CSS string can be applied to camera element based on current transform.\n   * @example\n   * const camera = new CSSCamera(el);\n   * camera.perspective = 300;\n   * console.log(camera.cameraCSS); // scale3d(1, 1, 1) translateZ(300px) rotateX(0deg) rotateY(0deg) rotateZ(0deg);\n   * @type {string}\n   */\n  public get cameraCSS() {\n    const perspective = this._perspective;\n    const rotateOffset = this._rotateOffset;\n    const rotation = this._rotation;\n    const scale = this._scale;\n\n    // Rotate in order of Z - Y - X\n    // tslint:disable-next-line: max-line-length\n    return `scale3d(${scale[0]}, ${scale[1]}, ${scale[2]}) translateZ(${perspective - rotateOffset}px) rotateX(${rotation[0]}deg) rotateY(${rotation[1]}deg) rotateZ(${rotation[2]}deg)`;\n  }\n\n  /**\n   * CSS string can be applied to world element based on current transform.\n   * ```\n   * const camera = new CSSCamera(el);\n   * console.log(camera.worldCSS); // \"translate3d(0px, 0px, 0px)\";\n   * camera.translate(0, 0, 300);\n   * console.log(camera.worldCSS); // \"translate3d(0px, 0px, -300px)\";\n   * ```\n   * @type {string}\n   */\n  public get worldCSS() {\n    const position = this._position;\n\n    return `translate3d(${-position[0]}px, ${-position[1]}px, ${-position[2]}px)`;\n  }\n\n  public set position(val: number[]) { this._position = vec3.fromValues(val[0], val[1], val[2]); }\n  public set scale(val: number[]) { this._scale = vec3.fromValues(val[0], val[1], val[2]); }\n  public set rotation(val: number[]) { this._rotation = vec3.fromValues(val[0], val[1], val[2]); }\n  public set quaternion(val: number[]) { this._rotation = quatToEuler(quat.fromValues(val[0], val[1], val[2], val[3])); }\n  public set perspective(val: number) { this._perspective = val; }\n  public set rotateOffset(val: number) { this._rotateOffset = val; }\n\n  /**\n   * Create new CSSCamera with given element / selector.\n   * @param - The element to apply camera. Can be HTMLElement or CSS selector.\n   * @param {Partial<Options>} [options] Camera options\n   * @param {number[]} [options.position=[0, 0, 0]] Initial position of the camera.\n   * @param {number[]} [options.scale=[1, 1, 1]] Initial scale of the camera.\n   * @param {number[]} [options.rotation=[0, 0, 0]] Initial Euler rotation angles(x, y, z) of the camera in degree.\n   * @param {number} [options.perspective=0] Initial perspective of the camera.\n   * @param {number} [options.rotateOffset=0] Initial rotate offset of the camera.\n   * @example\n   * const camera = new CSSCamera(\"#el\", {\n   *   position: [0, 0, 150], // Initial pos(x, y, z)\n   *   rotation: [90, 0, 0],  // Initial rotation(x, y, z, in degree)\n   *   perspective: 300       // CSS \"perspective\" value to apply\n   * });\n   */\n  constructor(el: string | HTMLElement, options: Partial<Options> = {}) {\n    this._element = getElement(el);\n\n    const op = assign(assign({}, DEFAULT.OPTIONS), options) as Options;\n\n    this._position = vec3.fromValues(op.position[0], op.position[1], op.position[2]);\n    this._scale = vec3.fromValues(op.scale[0], op.scale[1], op.scale[2]);\n    this._rotation = vec3.fromValues(op.rotation[0], op.rotation[1], op.rotation[2]);\n    this._perspective = op.perspective;\n    this._rotateOffset = op.rotateOffset;\n    this._updateTimer = -1;\n\n    const element = this._element;\n    const viewport = document.createElement('div');\n    const camera = viewport.cloneNode() as HTMLElement;\n    const world = viewport.cloneNode() as HTMLElement;\n\n    viewport.className = DEFAULT.CLASS.VIEWPORT;\n    camera.className = DEFAULT.CLASS.CAMERA;\n    world.className = DEFAULT.CLASS.WORLD;\n\n    applyCSS(viewport, DEFAULT.STYLE.VIEWPORT);\n    applyCSS(camera, DEFAULT.STYLE.CAMERA);\n    applyCSS(world, DEFAULT.STYLE.WORLD);\n\n    camera.appendChild(world);\n    viewport.appendChild(camera);\n\n    this._viewportEl = viewport;\n    this._cameraEl = camera;\n    this._worldEl = world;\n\n    // EL's PARENT -> VIEWPORT -> CAMERA -> WORLD -> EL\n    element.parentElement!.insertBefore(viewport, element);\n    world.appendChild(element);\n\n    this.update(0);\n  }\n\n  /**\n   * Focus a camera to given element.\n   * After focus, element will be in front of camera with no rotation applied.\n   * Also, it will have original width / height if neither [scale](#scale) nor [perspectiveOffset](#perspectiveOffset) is applied.\n   * This method won't work if any of element's parent except camera element has scale applied.\n   * @param - The element to focus. Can be HTMLElement or CSS selector.\n   * @return {CSSCamera} The instance itself\n   */\n  public focus(el: string | HTMLElement): this {\n    const element = getElement(el);\n    const focusMatrix = this._getFocusMatrix(element);\n\n    const rotation = quat.create();\n    const translation = vec3.create();\n    mat4.getRotation(rotation, focusMatrix);\n    mat4.getTranslation(translation, focusMatrix);\n\n    const eulerAngle = quatToEuler(rotation);\n\n    vec3.negate(eulerAngle, eulerAngle);\n\n    this._rotation = eulerAngle;\n    this._position = translation;\n    return this;\n  }\n\n  /**\n   * Translate a camera in its local coordinate space.\n   * For example, `camera.translateLocal(0, 0, -300)` will always move camera to direction where it's seeing.\n   * @param - Amount of horizontal translation, in px.\n   * @param - Amount of vertical translation, in px.\n   * @param - Amount of translation in view direction, in px.\n   * @return {CSSCamera} The instance itself\n   */\n  public translateLocal(x: number = 0, y: number = 0, z: number = 0): this {\n    const position = this._position;\n    const rotation = this._rotation;\n\n    const transVec = vec3.fromValues(x, y, z);\n    const rotQuat = quat.create();\n    quat.fromEuler(rotQuat, -rotation[0], -rotation[1], -rotation[2]);\n    vec3.transformQuat(transVec, transVec, rotQuat);\n\n    vec3.add(position, position, transVec);\n    return this;\n  }\n\n  /**\n   * Translate a camera in world(absolute) coordinate space.\n   * @param - Amount of translation in x axis, in px.\n   * @param - Amount of translation in y axis, in px.\n   * @param - Amount of translation in z axis, in px.\n   * @return {CSSCamera} The instance itself\n   */\n  public translate(x: number = 0, y: number = 0, z: number = 0): this {\n    vec3.add(this._position, this._position, vec3.fromValues(x, y, z));\n\n    return this;\n  }\n\n  /**\n   * Rotate a camera in world(absolute) coordinate space.\n   * @param - Amount of rotation in x axis, in degree.\n   * @param - Amount of rotation in y axis, in degree.\n   * @param - Amount of rotation in z axis, in degree.\n   * @return {CSSCamera} The instance itself\n   */\n  public rotate(x: number = 0, y: number = 0, z: number = 0): this {\n    vec3.add(this._rotation, this._rotation, vec3.fromValues(x, y, z));\n\n    return this;\n  }\n\n  /**\n   * Updates a camera CSS with given duration.\n   * Every other camera transforming properties / methods will be batched until this method is called.\n   * @example\n   * const camera = new CSSCamera(el);\n   * console.log(camera.cameraEl.style.transform); // ''\n   *\n   * camera.perspective = 300;\n   * camera.translate(0, 0, 300);\n   * camera.rotate(0, 90, 0);\n   * console.log(camera.cameraEl.style.transform); // '', Not changed!\n   *\n   * await camera.update(1000); // Camera style is updated.\n   * console.log(camera.cameraEl.style.transform); // scale3d(1, 1, 1) translateZ(300px) rotateX(0deg) rotateY(90deg) rotateZ(0deg)\n   *\n   * // When if you want to apply multiple properties\n   * camera.update(1000, {\n   *   property: \"transform, background-color\",\n   *   timingFunction: \"ease-out, ease-out\", // As same with CSS, you should assign values to each property\n   *   delay: \"0ms, 100ms\"\n   * });\n   * @param - Transition duration in ms.\n   * @param {Partial<UpdateOption>} [options] Transition options.\n   * @param {string} [options.property=\"transform\"] CSS [transition-property](https://developer.mozilla.org/en-US/docs/Web/CSS/transition-property) to apply.\n   * @param {string} [options.timingFunction=\"ease-out\"] CSS [transition-timing-function](https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function) to apply.\n   * @param {string} [options.delay=\"0ms\"] CSS [transition-delay](https://developer.mozilla.org/en-US/docs/Web/CSS/transition-delay) to apply.\n   * @return {Promise<CSSCamera>} A promise resolving instance itself\n   */\n  public async update(duration: number = 0, options: Partial<UpdateOption> = {}): Promise<this> {\n    applyCSS(this._viewportEl, { perspective: `${this.perspective}px` });\n    applyCSS(this._cameraEl, { transform: this.cameraCSS });\n    applyCSS(this._worldEl, { transform: this.worldCSS });\n\n    const updateOptions = assign(assign({}, DEFAULT.UPDATE_OPTIONS), options) as UpdateOption;\n\n    if (duration > 0) {\n      if (this._updateTimer > 0) {\n        window.clearTimeout(this._updateTimer);\n      }\n\n      const transitionDuration = `${duration}ms`;\n      const updateOption = Object.keys(updateOptions).reduce((option: {[key: string]: ValueOf<UpdateOption>}, key) => {\n        option[`transition${key.charAt(0).toUpperCase() + key.slice(1)}`] = updateOptions[key as keyof UpdateOption]!;\n        return option;\n      }, {});\n\n      const finalOption = {\n        transitionDuration,\n        ...updateOption,\n      };\n\n      [this._viewportEl, this._cameraEl, this._worldEl].forEach(el => {\n        applyCSS(el, finalOption);\n      });\n    }\n\n    return new Promise(resolve => {\n      // Make sure to use requestAnimationFrame even if duration is 0\n      // To make sure DOM is updated, for successive update() calls.\n      if (duration > 0) {\n        this._updateTimer = window.setTimeout(() => {\n          // Reset transition values\n          [this._viewportEl, this._cameraEl, this._worldEl].forEach(el => {\n            applyCSS(el, { transition: '' });\n          });\n          this._updateTimer = -1;\n          resolve();\n        }, duration);\n      } else {\n        requestAnimationFrame(() => {\n          resolve();\n        });\n      }\n    });\n  }\n\n  private _getFocusMatrix(element: HTMLElement): mat4 {\n    const elements: HTMLElement[] = [];\n    while (element) {\n      elements.push(element);\n      if (element === this._element) break;\n      element = element.parentElement!;\n    }\n\n    // Order by shallow to deep\n    elements.reverse();\n\n    const elStyles = elements.map(el => window.getComputedStyle(el));\n\n    // Find first element that transform-style is not preserve-3d\n    // As all childs of that element is affected by its matrix\n    const firstFlatIndex = findIndex(elStyles, style => style.transformStyle !== 'preserve-3d');\n    if (firstFlatIndex > 0) { // el doesn't have to be preserve-3d'ed\n      elStyles.splice(firstFlatIndex + 1);\n    }\n\n    let parentOffset: Offset = {\n      left: 0,\n      top: 0,\n      width: this.viewportEl.offsetWidth,\n      height: this.viewportEl.offsetHeight,\n    };\n\n    // Accumulated rotation\n    const accRotation = quat.identity(quat.create());\n    // Assume center of screen as (0, 0, 0)\n    const centerPos = vec3.fromValues(0, 0, 0);\n\n    elStyles.forEach((style, idx) => {\n      const el = elements[idx];\n      const currentOffset = {\n        left: el.offsetLeft,\n        top: el.offsetTop,\n        width: el.offsetWidth,\n        height: el.offsetHeight,\n      };\n      const transformMat = getTransformMatrix(style);\n      const offsetFromParent = getOffsetFromParent(currentOffset, parentOffset);\n      vec3.transformQuat(offsetFromParent, offsetFromParent, accRotation);\n\n      vec3.add(centerPos, centerPos, offsetFromParent);\n\n      const rotateOffset = getRotateOffset(style, currentOffset);\n      vec3.transformQuat(rotateOffset, rotateOffset, accRotation);\n\n      const transformOrigin = vec3.clone(centerPos);\n      vec3.add(transformOrigin, transformOrigin, rotateOffset);\n\n      const centerFromOrigin = vec3.create();\n      vec3.sub(centerFromOrigin, centerPos, transformOrigin);\n\n      const invAccRotation = quat.invert(quat.create(), accRotation);\n      vec3.transformQuat(centerFromOrigin, centerFromOrigin, invAccRotation);\n      vec3.transformMat4(centerFromOrigin, centerFromOrigin, transformMat);\n      vec3.transformQuat(centerFromOrigin, centerFromOrigin, accRotation);\n\n      const newCenterPos = vec3.add(vec3.create(), transformOrigin, centerFromOrigin);\n      const rotation = mat4.getRotation(quat.create(), transformMat);\n\n      vec3.copy(centerPos, newCenterPos);\n      quat.mul(accRotation, accRotation, rotation);\n      parentOffset = currentOffset;\n    });\n\n    const perspective = vec3.fromValues(0, 0, this.perspective);\n    vec3.transformQuat(perspective, perspective, accRotation);\n    vec3.add(centerPos, centerPos, perspective);\n\n    const matrix = mat4.create();\n    mat4.fromRotationTranslation(matrix, accRotation, centerPos);\n\n    return matrix;\n  }\n}\n\nexport default CSSCamera;\n"],"names":["EPSILON","ARRAY_TYPE","Float32Array","Array","RANDOM","Math","random","degree","PI","create","out","glMatrix","clone","a","copy","fromValues","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","set","identity","transpose","a01","a02","a03","a12","a13","a23","invert","a00","a10","a11","a20","a21","a22","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","adjoint","determinant","multiply","b","b0","b1","b2","b3","translate","v","x","y","z","scale","rotate","rad","axis","len","sqrt","s","c","t","b12","b20","b21","b22","sin","cos","rotateX","rotateY","rotateZ","fromTranslation","fromScaling","fromRotation","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","q","w","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","fromQuat2","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","getTranslation","mat","getScaling","getRotation","trace","S","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","o","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","fromQuat","yx","zx","zy","frustum","left","right","bottom","top","near","far","rl","tb","nf","perspective","fovy","aspect","f","tan","Infinity","perspectiveFromFieldOfView","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","ortho","lr","bt","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","abs","targetTo","target","str","frob","pow","add","subtract","multiplyScalar","multiplyScalarAndAdd","exactEquals","equals","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","a14","a15","b4","b5","b6","b7","b8","b9","b13","b14","b15","max","mul","sub","length","negate","normalize","dot","cross","transformMat4","m","transformQuat","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","forEach","vec","stride","offset","count","fn","arg","i","l","min","squaredLength","lerp","setAxisAngle","getAxisAngle","out_axis","acos","calculateW","slerp","omega","cosom","sinom","scale0","scale1","u1","u2","u3","sqrt1MinusU1","sqrtU1","invDot","conjugate","fromMat3","fTrace","fRoot","j","k","fromEuler","halfToRad","cx","cy","cz","vec4","sqrLen","rotationTo","tmpvec3","vec3","xUnitVec3","yUnitVec3","sqlerp","temp1","temp2","d","setAxes","matr","mat3","view","quat","ELEMENT_NOT_EXIST","selector","MUST_STRING_OR_ELEMENT","received","getElement","el","baseElement","queryResult","querySelector","document","Error","nodeName","nodeType","applyCSS","element","cssObj","Object","keys","property","style","getTransformMatrix","elStyle","trVal","getPropertyValue","transformStr","exec","matrixVal","split","map","val","parseFloat","mat4","matrix","getOffsetFromParent","currentOffset","parentOffset","offsetLeft","width","offsetTop","height","getRotateOffset","transformOrigin","substring","findIndex","iterable","callback","clamp","assign","_i","srcs","source","key","value","radToDeg","quatToEuler","rotM","euler","asin","atan2","STYLE","VIEWPORT","overflow","CAMERA","WORLD","CLASS","OPTIONS","position","rotation","rotateOffset","UPDATE_OPTIONS","timingFunction","delay","options","_element","op","DEFAULT","_position","_scale","_rotation","_perspective","_rotateOffset","_updateTimer","viewport","createElement","camera","cloneNode","world","className","appendChild","_viewportEl","_cameraEl","_worldEl","parentElement","insertBefore","update","CSSCamera","r","quaternion","focusMatrix","_getFocusMatrix","eulerAngle","transVec","rotQuat","duration","Promise","transform","cameraCSS","worldCSS","updateOptions","window","clearTimeout","transitionDuration","updateOption","reduce","option","charAt","toUpperCase","slice","finalOption_1","resolve","_this","setTimeout","transition","requestAnimationFrame","elements","push","reverse","elStyles","getComputedStyle","firstFlatIndex","transformStyle","splice","viewportEl","offsetWidth","offsetHeight","accRotation","centerPos","idx","transformMat","offsetFromParent","centerFromOrigin","invAccRotation","newCenterPos"],"mappings":"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"}