{"version":3,"file":"css-camera.min.js","sources":["../src/utils/helper.ts","../src/constants/error.ts","../src/utils/math.ts","../src/constants/default.ts","../src/CSSCamera.ts"],"sourcesContent":["import { mat4, vec3 } from 'gl-matrix';\nimport { ELEMENT_NOT_EXIST, MUST_STRING_OR_ELEMENT } from '../constants/error';\nimport { Matrix4x4, Offset } from '../types';\n\nexport const getElement = (el: string | HTMLElement, baseElement?: HTMLElement): HTMLElement => {\n    if (typeof el === 'string') {\n        const queryResult = baseElement\n          ? baseElement.querySelector(el)\n          : document.querySelector(el);\n        if (!queryResult) {\n            throw new Error(ELEMENT_NOT_EXIST(el));\n        }\n        return queryResult as HTMLElement;\n    } else if (el.nodeName && el.nodeType === 1) {\n        return el;\n    } else {\n        throw new Error(MUST_STRING_OR_ELEMENT(el));\n    }\n};\n\nexport function applyCSS(element: HTMLElement, cssObj: { [keys: string]: string }): void {\n  Object.keys(cssObj).forEach(property => {\n    (element.style as any)[property] = cssObj[property];\n  });\n}\n\nexport function getTransformMatrix(elStyle: CSSStyleDeclaration): mat4 {\n  const trVal = elStyle.getPropertyValue('transform');\n  const transformStr = /\\(((\\s|\\S)+)\\)/.exec(trVal);\n  const matrixVal = transformStr\n    ? transformStr[1].split(',').map(val => parseFloat(val)) as Matrix4x4\n    : [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1] as Matrix4x4;\n  if (matrixVal.length === 16 ) {\n    return mat4.fromValues(...matrixVal);\n  } else {\n    // Convert 2d matrix(length 6) to 3d\n    const matrix = mat4.create();\n    mat4.identity(matrix);\n\n    matrix[0] = matrixVal[0];\n    matrix[1] = matrixVal[1];\n    matrix[4] = matrixVal[2];\n    matrix[5] = matrixVal[3];\n    matrix[12] = matrixVal[4];\n    matrix[13] = matrixVal[5];\n\n    return matrix;\n  }\n}\n\nexport function getOffsetFromParent(currentOffset: Offset, parentOffset: Offset): vec3 {\n  const offsetLeft = currentOffset.left + (currentOffset.width - parentOffset.width) / 2;\n  const offsetTop = currentOffset.top + (currentOffset.height - parentOffset.height) / 2;\n\n  return vec3.fromValues(offsetLeft, offsetTop, 0);\n}\n\nexport function getRotateOffset(elStyle: CSSStyleDeclaration, currentOffset: Offset): vec3 {\n  const axis = (elStyle.transformOrigin as string)\n    .split(' ')\n    .map(str => parseFloat(str.substring(0, str.length - 2)));\n  const ax = axis[0] - currentOffset.width / 2;\n  const ay = axis[1] - currentOffset.height / 2;\n\n  return vec3.fromValues(ax, ay, 0);\n}\n\nexport function findIndex<T>(iterable: T[], callback: (el: T) => boolean): number {\n  for (let i = 0; i < iterable.length; i += 1) {\n    const element = iterable[i];\n    if (element && callback(element)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n// return [0, 1, ...., max - 1]\nexport function range(max: number): number[] {\n  const counterArray: number[] = [];\n  for (let i = 0; i < max; i += 1) {\n    counterArray[i] = i;\n  }\n  return counterArray;\n}\n\nexport function clamp(val: number, min: number, max: number): number {\n  return Math.max(Math.min(val, max), min);\n}\n","export const ELEMENT_NOT_EXIST = (selector: string) => `Element with selector \"${selector}\" doesn't exist.`;\nexport const MUST_STRING_OR_ELEMENT = (received: any) => `Element should be provided in string or HTMLElement. Received: ${received}`;\n","import { mat4, quat, vec3 } from 'gl-matrix';\nimport { clamp } from './helper';\n\nexport function degToRad(deg: number): number {\n  return Math.PI * deg / 180;\n}\n\nexport function radToDeg(rad: number): number {\n  return 180 * rad / Math.PI;\n}\n\n// From Three.js https://github.com/mrdoob/three.js/blob/dev/src/math/Euler.js\nexport function quatToEuler(q: quat): vec3 {\n  const rotM = mat4.create();\n  mat4.fromQuat(rotM, q);\n\n  const m11 = rotM[0];\n  const m12 = rotM[4];\n  // const m13 = rotM[8];\n  const m21 = rotM[1];\n  const m22 = rotM[5];\n  // const m23 = rotM[9];\n  const m31 = rotM[2];\n  const m32 = rotM[6];\n  const m33 = rotM[10];\n\n  const euler = vec3.create();\n\n  // ZYX\n  euler[1] = Math.asin(-clamp(m31, -1, 1));\n  if (Math.abs(m31) < 0.99999) {\n    euler[0] = Math.atan2(m32, m33);\n    euler[2] = Math.atan2(m21, m11);\n  } else {\n    euler[0] = 0;\n    euler[2] = Math.atan2(-m12, m22);\n  }\n\n  return euler.map(val => radToDeg(val)) as vec3;\n}\n","export default {\n  FOV: 50,\n  ORTHOGRAPHIC: false,\n  STYLE: {\n    VIEWPORT: {\n      width: '100%',\n      height: '100%',\n      'transform-style': 'preserve-3d',\n      overflow: 'hidden',\n    },\n    CAMERA: {\n      width: '100%',\n      height: '100%',\n      'transform-style': 'preserve-3d',\n      'will-change': 'transform',\n    },\n    WORLD: {\n      width: '100%',\n      height: '100%',\n      'transform-style': 'preserve-3d',\n      'will-change': 'transform',\n    },\n  },\n  CLASS: {\n    VIEWPORT: 'cc-viewport',\n    CAMERA: 'cc-camera',\n    WORLD: 'cc-world',\n  },\n};\n","import { mat4, vec3, quat } from 'gl-matrix';\nimport { getElement, applyCSS, getTransformMatrix, findIndex, getOffsetFromParent, getRotateOffset } from './utils/helper';\nimport { quatToEuler } from './utils/math';\nimport DEFAULT from './constants/default';\nimport { Offset } from './types';\n\nclass CSSCamera {\n  private _element: HTMLElement;\n  private _viewportEl: HTMLElement;\n  private _cameraEl: HTMLElement;\n  private _worldEl: HTMLElement;\n\n  private _position: vec3;\n  private _scale: vec3;\n  private _rotation: vec3;\n  private _perspective: number;\n  private _perspectiveOffset: number;\n\n  /**\n   * Current version of CSSCamera.\n   * ```\n   * console.log(CSSCamera.VERSION); // ex) 1.0.0\n   * ```\n   * @type {string}\n   */\n  static get VERSION() { return '#__VERSION__#'; }\n\n  /**\n   * The element provided in the constructor.\n   * ```\n   * const camera = new CSSCamera(el);\n   * console.log(camera.element === el); // true\n   * ```\n   * @type {HTMLElement}\n   */\n  public get element() { return this._element; }\n\n  /**\n   * The reference of viewport DOM element.\n   * @type {HTMLElement}\n   */\n  public get viewportEl() { return this._viewportEl; }\n\n  /**\n   * The reference of camera DOM element.\n   * @type {HTMLElement}\n   */\n  public get cameraEl() { return this._cameraEl; }\n\n  /**\n   * The reference of world DOM element.\n   * @type {HTMLElement}\n   */\n  public get worldEl() { return this._worldEl; }\n\n  /**\n   * The current position as number array([x, y, z]).\n   * ```\n   * const camera = new CSSCamera(el);\n   * console.log(camera.position); // [0, 0, 0];\n   * camera.position = [0, 0, 300];\n   * console.log(camera.position); // [0, 0, 300];\n   * ```\n   * @type {number[]}\n   */\n  public get position() { return [...this._position]; }\n\n  /**\n   * The current scale as number array([x, y, z]).\n   * ```\n   * const camera = new CSSCamera(el);\n   * console.log(camera.scale); // [1, 1, 1];\n   * camera.scale = [5, 1, 1];\n   * console.log(camera.scale); // [5, 1, 1];\n   * ```\n   * @type {number[]}\n   */\n  public get scale() { return [...this._scale]; }\n\n  /**\n   * The current euler rotation as number array([x, y, z]).\n   * ```\n   * const camera = new CSSCamera(el);\n   * console.log(camera.rotation); // [0, 0, 0];\n   * camera.rotation = [90, 0, 0];\n   * console.log(camera.rotation); // [90, 0, 0];\n   * ```\n   * @type {number[]}\n   */\n  public get rotation() { return [...this._rotation]; }\n\n  /**\n   * The current quaternion rotation as number array([x, y, z, w]).\n   * ```\n   * const camera = new CSSCamera(el);\n   * console.log(camera.quaternion); // [0, 0, 0, 1];\n   * camera.rotation = [90, 0, 0];\n   * console.log(camera.quaternion); // [0.7071067690849304, 0, 0, 0.7071067690849304];\n   * camera.quaternion = [0, 0, 0, 1];\n   * console.log(camera.rotation); // [0, -0, 0];\n   * ```\n   * @type {number[]}\n   */\n  public get quaternion() {\n    const r = this._rotation;\n    const quaternion = quat.fromEuler(quat.create(), r[0], r[1], r[2]);\n\n    return [...quaternion];\n  }\n\n  /**\n   * The current perspective value that will be applied to viewport element.\n   * ```\n   * const camera = new CSSCamera(el);\n   * camera.perspective = 300;\n   * console.log(camera.perspective); // 300\n   * ```\n   * @type {number}\n   */\n  public get perspective() { return this._perspective; }\n\n  /**\n   * The current perspective offset value that will be applied to camera element.\n   * ```\n   * const camera = new CSSCamera(el);\n   * camera.perspective = 300;\n   * console.log(camera.cameraCSS); // scale3d(1, 1, 1) translateZ(300px) rotateX(0deg) rotateY(0deg) rotateZ(0deg);\n   * camera.perspectiveOffset = 100;\n   * console.log(camera.cameraCSS); // scale3d(1, 1, 1) translateZ(400px) rotateX(0deg) rotateY(0deg) rotateZ(0deg);\n   * ```\n   * @type {number}\n   */\n  public get perspectiveOffset() { return this._perspectiveOffset; }\n\n  /**\n   * CSS string can be applied to camera element based on current transform.\n   * ```\n   * const camera = new CSSCamera(el);\n   * camera.perspective = 300;\n   * console.log(camera.cameraCSS); // scale3d(1, 1, 1) translateZ(300px) rotateX(0deg) rotateY(0deg) rotateZ(0deg);\n   * ```\n   * @type {string}\n   */\n  public get cameraCSS() {\n    const perspective = this._perspective;\n    const perspectiveOffset = this._perspectiveOffset;\n    const rotation = this._rotation;\n    const scale = this._scale;\n\n    // Rotate in order of Z - Y - X\n    // tslint:disable-next-line: max-line-length\n    return `scale3d(${scale[0]}, ${scale[1]}, ${scale[2]}) translateZ(${perspective + perspectiveOffset}px) rotateX(${rotation[0]}deg) rotateY(${rotation[1]}deg) rotateZ(${rotation[2]}deg)`;\n  }\n\n  /**\n   * CSS string can be applied to world element based on current transform.\n   * ```\n   * const camera = new CSSCamera(el);\n   * console.log(camera.worldCSS); // \"translate3d(0px, 0px, 0px)\";\n   * camera.translate(0, 0, 300);\n   * console.log(camera.worldCSS); // \"translate3d(0px, 0px, -300px)\";\n   * ```\n   * @type {string}\n   */\n  public get worldCSS() {\n    const position = this._position;\n\n    return `translate3d(${-position[0]}px, ${-position[1]}px, ${-position[2]}px)`;\n  }\n\n  public set position(val: number[]) { this._position = vec3.fromValues(val[0], val[1], val[2]); }\n  public set scale(val: number[]) { this._scale = vec3.fromValues(val[0], val[1], val[2]); }\n  public set rotation(val: number[]) { this._rotation = vec3.fromValues(val[0], val[1], val[2]); }\n  public set quaternion(val: number[]) { this._rotation = quatToEuler(quat.fromValues(val[0], val[1], val[2], val[3])); }\n  public set perspective(val: number) { this._perspective = val; }\n  public set perspectiveOffset(val: number) { this._perspectiveOffset = val; }\n\n  /**\n   * Create new CSSCamera with given element / selector.\n   * @param - The element to apply camera. Can be HTMLElement or CSS selector.\n   */\n  constructor(el: string | HTMLElement) {\n    this._element = getElement(el);\n    this._position = vec3.create();\n    this._scale = vec3.fromValues(1, 1, 1);\n    this._rotation = vec3.create();\n    this._perspective = 0;\n    this._perspectiveOffset = 0;\n\n    const element = this._element;\n    const viewport = document.createElement('div');\n    const camera = viewport.cloneNode() as HTMLElement;\n    const world = viewport.cloneNode() as HTMLElement;\n\n    viewport.className = DEFAULT.CLASS.VIEWPORT;\n    camera.className = DEFAULT.CLASS.CAMERA;\n    world.className = DEFAULT.CLASS.WORLD;\n\n    applyCSS(viewport, DEFAULT.STYLE.VIEWPORT);\n    applyCSS(camera, DEFAULT.STYLE.CAMERA);\n    applyCSS(world, DEFAULT.STYLE.WORLD);\n\n    camera.appendChild(world);\n    viewport.appendChild(camera);\n\n    this._viewportEl = viewport;\n    this._cameraEl = camera;\n    this._worldEl = world;\n\n    // EL's PARENT -> VIEWPORT -> CAMERA -> WORLD -> EL\n    element.parentElement!.insertBefore(viewport, element);\n    world.appendChild(element);\n  }\n\n  /**\n   * Focus a camera to given element.\n   * After focus, element will be in front of camera with no rotation applied.\n   * Also, it will have original width / height if neither [scale](#scale) nor [perspectiveOffset](#perspectiveOffset) is applied.\n   * This method won't work if any of element's parent except camera element has scale applied.\n   * @param - The element to focus. Can be HTMLElement or CSS selector.\n   * @return {CSSCamera} The instance itself\n   */\n  public focus(el: string | HTMLElement): this {\n    const element = getElement(el);\n    const focusMatrix = this._getFocusMatrix(element);\n\n    const rotation = quat.create();\n    const translation = vec3.create();\n    mat4.getRotation(rotation, focusMatrix);\n    mat4.getTranslation(translation, focusMatrix);\n\n    const eulerAngle = quatToEuler(rotation);\n\n    vec3.negate(eulerAngle, eulerAngle);\n\n    this._rotation = eulerAngle;\n    this._position = translation;\n    return this;\n  }\n\n  /**\n   * Translate a camera in its local coordinate space.\n   * For example, `camera.translateLocal(0, 0, -300)` will always move camera to direction where it's seeing.\n   * @param - Amount of horizontal translation, in px.\n   * @param - Amount of vertical translation, in px.\n   * @param - Amount of translation in view direction, in px.\n   * @return {CSSCamera} The instance itself\n   */\n  public translateLocal(x: number = 0, y: number = 0, z: number = 0): this {\n    const position = this._position;\n    const rotation = this._rotation;\n\n    const transVec = vec3.fromValues(x, y, z);\n    const rotQuat = quat.create();\n    quat.fromEuler(rotQuat, -rotation[0], -rotation[1], -rotation[2]);\n    vec3.transformQuat(transVec, transVec, rotQuat);\n\n    vec3.add(position, position, transVec);\n    return this;\n  }\n\n  /**\n   * Translate a camera in world(absolute) coordinate space.\n   * @param - Amount of translation in x axis, in px.\n   * @param - Amount of translation in y axis, in px.\n   * @param - Amount of translation in z axis, in px.\n   * @return {CSSCamera} The instance itself\n   */\n  public translate(x: number = 0, y: number = 0, z: number = 0): this {\n    vec3.add(this._position, this._position, vec3.fromValues(x, y, z));\n\n    return this;\n  }\n\n  /**\n   * Rotate a camera in world(absolute) coordinate space.\n   * @param - Amount of rotation in x axis, in degree.\n   * @param - Amount of rotation in y axis, in degree.\n   * @param - Amount of rotation in z axis, in degree.\n   * @return {CSSCamera} The instance itself\n   */\n  public rotate(x: number = 0, y: number = 0, z: number = 0): this {\n    vec3.add(this._rotation, this._rotation, vec3.fromValues(x, y, z));\n\n    return this;\n  }\n\n  /**\n   * Updates a camera CSS with given duration.\n   * Every other camera transforming properties / methods will be batched until this method is called.\n   * ```\n   * const camera = new CSSCamera(el);\n   * console.log(camera.cameraEl.style.transform); // ''\n   *\n   * camera.perspective = 300;\n   * camera.translate(0, 0, 300);\n   * camera.rotate(0, 90, 0);\n   * console.log(camera.cameraEl.style.transform); // '', Not changed!\n   *\n   * await camera.update(1000); // Camera style is updated.\n   * console.log(camera.cameraEl.style.transform); // scale3d(1, 1, 1) translateZ(300px) rotateX(0deg) rotateY(90deg) rotateZ(0deg)\n   * ```\n   * @param - Transition duration in ms.\n   * @return {Promise<CSSCamera>} A promise resolving instance itself\n   */\n  public async update(duration: number = 0): Promise<this> {\n    const transition = duration > 0 ? `transform ${duration}ms` : '';\n\n    applyCSS(this._viewportEl, { perspective: `${this.perspective}px` });\n    applyCSS(this._cameraEl, {\n      transition,\n      transform: this.cameraCSS,\n    });\n    applyCSS(this._worldEl, {\n      transition,\n      transform: this.worldCSS,\n    });\n\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve();\n      }, duration);\n    });\n  }\n\n  private _getFocusMatrix(element: HTMLElement): mat4 {\n    const elements: HTMLElement[] = [];\n    while (element) {\n      elements.push(element);\n      if (element === this._element) break;\n      element = element.parentElement!;\n    }\n\n    // Order by shallow to deep\n    elements.reverse();\n\n    const elStyles = elements.map(el => window.getComputedStyle(el));\n\n    // Find first element that transform-style is not preserve-3d\n    // As all childs of that element is affected by its matrix\n    const firstFlatIndex = findIndex(elStyles, style => style.transformStyle !== 'preserve-3d');\n    if (firstFlatIndex > 0) { // el doesn't have to be preserve-3d'ed\n      elStyles.splice(firstFlatIndex + 1);\n    }\n\n    let parentOffset: Offset = {\n      left: 0,\n      top: 0,\n      width: this.viewportEl.offsetWidth,\n      height: this.viewportEl.offsetHeight,\n    };\n\n    // Accumulated rotation\n    const accRotation = quat.identity(quat.create());\n    // Assume center of screen as (0, 0, 0)\n    const centerPos = vec3.fromValues(0, 0, 0);\n\n    elStyles.forEach((style, idx) => {\n      const el = elements[idx];\n      const currentOffset = {\n        left: el.offsetLeft,\n        top: el.offsetTop,\n        width: el.offsetWidth,\n        height: el.offsetHeight,\n      };\n      const transformMat = getTransformMatrix(style);\n      const offsetFromParent = getOffsetFromParent(currentOffset, parentOffset);\n      vec3.transformQuat(offsetFromParent, offsetFromParent, accRotation);\n\n      vec3.add(centerPos, centerPos, offsetFromParent);\n\n      const rotateOffset = getRotateOffset(style, currentOffset);\n      vec3.transformQuat(rotateOffset, rotateOffset, accRotation);\n\n      const transformOrigin = vec3.clone(centerPos);\n      vec3.add(transformOrigin, transformOrigin, rotateOffset);\n\n      const centerFromOrigin = vec3.create();\n      vec3.sub(centerFromOrigin, centerPos, transformOrigin);\n\n      const invAccRotation = quat.invert(quat.create(), accRotation);\n      vec3.transformQuat(centerFromOrigin, centerFromOrigin, invAccRotation);\n      vec3.transformMat4(centerFromOrigin, centerFromOrigin, transformMat);\n      vec3.transformQuat(centerFromOrigin, centerFromOrigin, accRotation);\n\n      const newCenterPos = vec3.add(vec3.create(), transformOrigin, centerFromOrigin);\n      const rotation = mat4.getRotation(quat.create(), transformMat);\n\n      vec3.copy(centerPos, newCenterPos);\n      quat.mul(accRotation, accRotation, rotation);\n      parentOffset = currentOffset;\n    });\n\n    const perspective = vec3.fromValues(0, 0, this.perspective);\n    vec3.transformQuat(perspective, perspective, accRotation);\n    vec3.add(centerPos, centerPos, perspective);\n\n    const matrix = mat4.create();\n    mat4.fromRotationTranslation(matrix, accRotation, centerPos);\n\n    return matrix;\n  }\n}\n\nexport default CSSCamera;\n"],"names":["getElement","el","baseElement","queryResult","querySelector","document","Error","selector","ELEMENT_NOT_EXIST","nodeName","nodeType","received","MUST_STRING_OR_ELEMENT","applyCSS","element","cssObj","Object","keys","forEach","property","style","quatToEuler","q","rotM","mat4","create","fromQuat","m11","m12","m21","m22","m31","m32","m33","euler","vec3","Math","asin","val","min","max","clamp","abs","atan2","map","rad","PI","radToDeg","VIEWPORT","width","height","overflow","CAMERA","WORLD","_element","_position","_scale","fromValues","_rotation","_perspective","_perspectiveOffset","this","viewport","createElement","camera","cloneNode","world","className","DEFAULT","appendChild","_viewportEl","_cameraEl","_worldEl","parentElement","insertBefore","CSSCamera","r","quat","fromEuler","perspective","perspectiveOffset","rotation","scale","position","focusMatrix","_getFocusMatrix","translation","getRotation","getTranslation","eulerAngle","negate","x","y","z","transVec","rotQuat","transformQuat","add","duration","Promise","transition","transform","cameraCSS","worldCSS","resolve","setTimeout","elements","push","reverse","elStyles","window","getComputedStyle","firstFlatIndex","iterable","callback","i","length","findIndex","transformStyle","splice","parentOffset","left","top","viewportEl","offsetWidth","offsetHeight","accRotation","identity","centerPos","idx","currentOffset","offsetLeft","offsetTop","transformMat","elStyle","trVal","getPropertyValue","transformStr","exec","matrixVal","split","parseFloat","matrix","getTransformMatrix","offsetFromParent","getOffsetFromParent","rotateOffset","axis","transformOrigin","str","substring","ax","ay","getRotateOffset","clone","centerFromOrigin","sub","invAccRotation","invert","transformMat4","newCenterPos","copy","mul","fromRotationTranslation"],"mappings":"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"}