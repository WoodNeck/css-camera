{"version":3,"file":"css-camera.min.js","sources":["../src/utils/helper.ts","../src/constants/error.ts","../src/utils/math.ts","../src/constants/default.ts","../src/CSSCamera.ts"],"sourcesContent":["import { mat4, vec3 } from 'gl-matrix';\nimport { ELEMENT_NOT_EXIST, MUST_STRING_OR_ELEMENT } from '../constants/error';\nimport { Matrix4x4, Offset } from '../types';\n\nexport const getElement = (el: string | HTMLElement, baseElement?: HTMLElement): HTMLElement => {\n    if (typeof el === 'string') {\n        const queryResult = baseElement\n          ? baseElement.querySelector(el)\n          : document.querySelector(el);\n        if (!queryResult) {\n            throw new Error(ELEMENT_NOT_EXIST(el));\n        }\n        return queryResult as HTMLElement;\n    } else if (el.nodeName && el.nodeType === 1) {\n        return el;\n    } else {\n        throw new Error(MUST_STRING_OR_ELEMENT(el));\n    }\n};\n\nexport function applyCSS(element: HTMLElement, cssObj: { [keys: string]: string }): void {\n  Object.keys(cssObj).forEach(property => {\n    (element.style as any)[property] = cssObj[property];\n  });\n}\n\nexport function getTransformMatrix(elStyle: CSSStyleDeclaration): mat4 {\n  const trVal = elStyle.getPropertyValue('transform');\n  const transformStr = /\\(((\\s|\\S)+)\\)/.exec(trVal);\n  const matrixVal = transformStr\n    ? transformStr[1].split(',').map(val => parseFloat(val)) as Matrix4x4\n    : [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1] as Matrix4x4;\n  if (matrixVal.length === 16 ) {\n    return mat4.fromValues(...matrixVal);\n  } else {\n    // Convert 2d matrix(length 6) to 3d\n    const matrix = mat4.create();\n    mat4.identity(matrix);\n\n    matrix[0] = matrixVal[0];\n    matrix[1] = matrixVal[1];\n    matrix[4] = matrixVal[2];\n    matrix[5] = matrixVal[3];\n    matrix[12] = matrixVal[4];\n    matrix[13] = matrixVal[5];\n\n    return matrix;\n  }\n}\n\nexport function getOffsetFromParent(currentOffset: Offset, parentOffset: Offset): vec3 {\n  const offsetLeft = currentOffset.left + (currentOffset.width - parentOffset.width) / 2;\n  const offsetTop = currentOffset.top + (currentOffset.height - parentOffset.height) / 2;\n\n  return vec3.fromValues(offsetLeft, offsetTop, 0);\n}\n\nexport function getRotateOffset(elStyle: CSSStyleDeclaration, currentOffset: Offset): vec3 {\n  const axis = (elStyle.transformOrigin as string)\n    .split(' ')\n    .map(str => parseFloat(str.substring(0, str.length - 2)));\n  const ax = axis[0] - currentOffset.width / 2;\n  const ay = axis[1] - currentOffset.height / 2;\n\n  return vec3.fromValues(ax, ay, 0);\n}\n\nexport function findIndex<T>(iterable: T[], callback: (el: T) => boolean): number {\n  for (let i = 0; i < iterable.length; i += 1) {\n    const element = iterable[i];\n    if (element && callback(element)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n// return [0, 1, ...., max - 1]\nexport function range(max: number): number[] {\n  const counterArray: number[] = [];\n  for (let i = 0; i < max; i += 1) {\n    counterArray[i] = i;\n  }\n  return counterArray;\n}\n\nexport function clamp(val: number, min: number, max: number): number {\n  return Math.max(Math.min(val, max), min);\n}\n\nexport function assign(target: object, ...srcs: object[]): object {\n  srcs.forEach(source => {\n    Object.keys(source).forEach(key => {\n      const value = (source as any)[key];\n      (target as any)[key] = value;\n    });\n  });\n\n  return target;\n}\n","export const ELEMENT_NOT_EXIST = (selector: string) => `Element with selector \"${selector}\" doesn't exist.`;\nexport const MUST_STRING_OR_ELEMENT = (received: any) => `Element should be provided in string or HTMLElement. Received: ${received}`;\n","import { mat4, quat, vec3 } from 'gl-matrix';\nimport { clamp } from './helper';\n\nexport function degToRad(deg: number): number {\n  return Math.PI * deg / 180;\n}\n\nexport function radToDeg(rad: number): number {\n  return 180 * rad / Math.PI;\n}\n\n// From Three.js https://github.com/mrdoob/three.js/blob/dev/src/math/Euler.js\nexport function quatToEuler(q: quat): vec3 {\n  const rotM = mat4.create();\n  mat4.fromQuat(rotM, q);\n\n  const m11 = rotM[0];\n  const m12 = rotM[4];\n  // const m13 = rotM[8];\n  const m21 = rotM[1];\n  const m22 = rotM[5];\n  // const m23 = rotM[9];\n  const m31 = rotM[2];\n  const m32 = rotM[6];\n  const m33 = rotM[10];\n\n  const euler = vec3.create();\n\n  // ZYX\n  euler[1] = Math.asin(-clamp(m31, -1, 1));\n  if (Math.abs(m31) < 0.99999) {\n    euler[0] = Math.atan2(m32, m33);\n    euler[2] = Math.atan2(m21, m11);\n  } else {\n    euler[0] = 0;\n    euler[2] = Math.atan2(-m12, m22);\n  }\n\n  return euler.map(val => radToDeg(val)) as vec3;\n}\n","export const STYLE = {\n  VIEWPORT: {\n    width: '100%',\n    height: '100%',\n    'transform-style': 'preserve-3d',\n    overflow: 'hidden',\n  },\n  CAMERA: {\n    width: '100%',\n    height: '100%',\n    'transform-style': 'preserve-3d',\n    'will-change': 'transform',\n  },\n  WORLD: {\n    width: '100%',\n    height: '100%',\n    'transform-style': 'preserve-3d',\n    'will-change': 'transform',\n  },\n};\n\nexport const CLASS = {\n  VIEWPORT: 'cc-viewport',\n  CAMERA: 'cc-camera',\n  WORLD: 'cc-world',\n};\n\nexport const OPTIONS = {\n  position: [0, 0, 0],\n  scale: [1, 1, 1],\n  rotation: [0, 0, 0],\n  perspective: 0,\n  rotateOffset: 0,\n};\n\nexport const UPDATE_OPTIONS = {\n  property: 'transform',\n  timingFunction: 'ease-out',\n  delay: '0ms',\n};\n","import { mat4, vec3, quat } from 'gl-matrix';\nimport { getElement, applyCSS, getTransformMatrix, findIndex, getOffsetFromParent, getRotateOffset, assign } from './utils/helper';\nimport { quatToEuler } from './utils/math';\nimport * as DEFAULT from './constants/default';\nimport { Offset, UpdateOption, ValueOf, Options } from './types';\n\nclass CSSCamera {\n  private _element: HTMLElement;\n  private _viewportEl: HTMLElement;\n  private _cameraEl: HTMLElement;\n  private _worldEl: HTMLElement;\n\n  private _position: vec3;\n  private _scale: vec3;\n  private _rotation: vec3;\n  private _perspective: number;\n  private _rotateOffset: number;\n  private _updateTimer: number;\n\n  /**\n   * Current version of CSSCamera.\n   * @example\n   * console.log(CSSCamera.VERSION); // ex) 1.0.0\n   * @type {string}\n   */\n  static get VERSION() { return '#__VERSION__#'; }\n\n  /**\n   * The element provided in the constructor.\n   * @example\n   * const camera = new CSSCamera(el);\n   * console.log(camera.element === el); // true\n   * @type {HTMLElement}\n   */\n  public get element() { return this._element; }\n\n  /**\n   * The reference of viewport DOM element.\n   * @type {HTMLElement}\n   */\n  public get viewportEl() { return this._viewportEl; }\n\n  /**\n   * The reference of camera DOM element.\n   * @type {HTMLElement}\n   */\n  public get cameraEl() { return this._cameraEl; }\n\n  /**\n   * The reference of world DOM element.\n   * @type {HTMLElement}\n   */\n  public get worldEl() { return this._worldEl; }\n\n  /**\n   * The current position as number array([x, y, z]).\n   * @example\n   * const camera = new CSSCamera(el);\n   * console.log(camera.position); // [0, 0, 0];\n   * camera.position = [0, 0, 300];\n   * console.log(camera.position); // [0, 0, 300];\n   * @type {number[]}\n   */\n  public get position() { return [...this._position]; }\n\n  /**\n   * The current scale as number array([x, y, z]).\n   * @example\n   * const camera = new CSSCamera(el);\n   * console.log(camera.scale); // [1, 1, 1];\n   * camera.scale = [5, 1, 1];\n   * console.log(camera.scale); // [5, 1, 1];\n   * @type {number[]}\n   */\n  public get scale() { return [...this._scale]; }\n\n  /**\n   * The current Euler rotation angles in degree as number array([x, y, z]).\n   * @example\n   * const camera = new CSSCamera(el);\n   * console.log(camera.rotation); // [0, 0, 0];\n   * camera.rotation = [90, 0, 0];\n   * console.log(camera.rotation); // [90, 0, 0];\n   * @type {number[]}\n   */\n  public get rotation() { return [...this._rotation]; }\n\n  /**\n   * The current quaternion rotation as number array([x, y, z, w]).\n   * @example\n   * const camera = new CSSCamera(el);\n   * console.log(camera.quaternion); // [0, 0, 0, 1];\n   * camera.rotation = [90, 0, 0];\n   * console.log(camera.quaternion); // [0.7071067690849304, 0, 0, 0.7071067690849304];\n   * camera.quaternion = [0, 0, 0, 1];\n   * console.log(camera.rotation); // [0, -0, 0];\n   * @type {number[]}\n   */\n  public get quaternion() {\n    const r = this._rotation;\n    const quaternion = quat.fromEuler(quat.create(), r[0], r[1], r[2]);\n\n    return [...quaternion];\n  }\n\n  /**\n   * The current perspective value that will be applied to viewport element.\n   * @example\n   * const camera = new CSSCamera(el);\n   * camera.perspective = 300;\n   * console.log(camera.perspective); // 300\n   * @type {number}\n   */\n  public get perspective() { return this._perspective; }\n\n  /**\n   * The current rotate offset value that will be applied to camera element.\n   * The camera will be as far away from the focal point as this value.\n   * |![rot0](https://woodneck.github.io/css-camera/asset/rot0.gif)|![rot150](https://woodneck.github.io/css-camera/asset/rot150.gif)|\n   * |:---:|:---:|\n   * @example\n   * const camera = new CSSCamera(el);\n   * camera.perspective = 300;\n   * console.log(camera.cameraCSS); // scale3d(1, 1, 1) translateZ(300px) rotateX(0deg) rotateY(0deg) rotateZ(0deg);\n   * camera.rotateOffset = 100;\n   * console.log(camera.cameraCSS); // scale3d(1, 1, 1) translateZ(400px) rotateX(0deg) rotateY(0deg) rotateZ(0deg);\n   * @type {number}\n   */\n  public get rotateOffset() { return this._rotateOffset; }\n\n  /**\n   * CSS string can be applied to camera element based on current transform.\n   * @example\n   * const camera = new CSSCamera(el);\n   * camera.perspective = 300;\n   * console.log(camera.cameraCSS); // scale3d(1, 1, 1) translateZ(300px) rotateX(0deg) rotateY(0deg) rotateZ(0deg);\n   * @type {string}\n   */\n  public get cameraCSS() {\n    const perspective = this._perspective;\n    const rotateOffset = this._rotateOffset;\n    const rotation = this._rotation;\n    const scale = this._scale;\n\n    // Rotate in order of Z - Y - X\n    // tslint:disable-next-line: max-line-length\n    return `scale3d(${scale[0]}, ${scale[1]}, ${scale[2]}) translateZ(${perspective - rotateOffset}px) rotateX(${rotation[0]}deg) rotateY(${rotation[1]}deg) rotateZ(${rotation[2]}deg)`;\n  }\n\n  /**\n   * CSS string can be applied to world element based on current transform.\n   * ```\n   * const camera = new CSSCamera(el);\n   * console.log(camera.worldCSS); // \"translate3d(0px, 0px, 0px)\";\n   * camera.translate(0, 0, 300);\n   * console.log(camera.worldCSS); // \"translate3d(0px, 0px, -300px)\";\n   * ```\n   * @type {string}\n   */\n  public get worldCSS() {\n    const position = this._position;\n\n    return `translate3d(${-position[0]}px, ${-position[1]}px, ${-position[2]}px)`;\n  }\n\n  public set position(val: number[]) { this._position = vec3.fromValues(val[0], val[1], val[2]); }\n  public set scale(val: number[]) { this._scale = vec3.fromValues(val[0], val[1], val[2]); }\n  public set rotation(val: number[]) { this._rotation = vec3.fromValues(val[0], val[1], val[2]); }\n  public set quaternion(val: number[]) { this._rotation = quatToEuler(quat.fromValues(val[0], val[1], val[2], val[3])); }\n  public set perspective(val: number) { this._perspective = val; }\n  public set rotateOffset(val: number) { this._rotateOffset = val; }\n\n  /**\n   * Create new CSSCamera with given element / selector.\n   * @param - The element to apply camera. Can be HTMLElement or CSS selector.\n   * @param {Partial<Options>} [options] Camera options\n   * @param {number[]} [options.position=[0, 0, 0]] Initial position of the camera.\n   * @param {number[]} [options.scale=[1, 1, 1]] Initial scale of the camera.\n   * @param {number[]} [options.rotation=[0, 0, 0]] Initial Euler rotation angles(x, y, z) of the camera in degree.\n   * @param {number} [options.perspective=0] Initial perspective of the camera.\n   * @param {number} [options.rotateOffset=0] Initial rotate offset of the camera.\n   * @example\n   * const camera = new CSSCamera(\"#el\", {\n   *   position: [0, 0, 150], // Initial pos(x, y, z)\n   *   rotation: [90, 0, 0],  // Initial rotation(x, y, z, in degree)\n   *   perspective: 300       // CSS \"perspective\" value to apply\n   * });\n   */\n  constructor(el: string | HTMLElement, options: Partial<Options> = {}) {\n    this._element = getElement(el);\n\n    const op = assign(assign({}, DEFAULT.OPTIONS), options) as Options;\n\n    this._position = vec3.fromValues(op.position[0], op.position[1], op.position[2]);\n    this._scale = vec3.fromValues(op.scale[0], op.scale[1], op.scale[2]);\n    this._rotation = vec3.fromValues(op.rotation[0], op.rotation[1], op.rotation[2]);\n    this._perspective = op.perspective;\n    this._rotateOffset = op.rotateOffset;\n    this._updateTimer = -1;\n\n    const element = this._element;\n    const viewport = document.createElement('div');\n    const camera = viewport.cloneNode() as HTMLElement;\n    const world = viewport.cloneNode() as HTMLElement;\n\n    viewport.className = DEFAULT.CLASS.VIEWPORT;\n    camera.className = DEFAULT.CLASS.CAMERA;\n    world.className = DEFAULT.CLASS.WORLD;\n\n    applyCSS(viewport, DEFAULT.STYLE.VIEWPORT);\n    applyCSS(camera, DEFAULT.STYLE.CAMERA);\n    applyCSS(world, DEFAULT.STYLE.WORLD);\n\n    camera.appendChild(world);\n    viewport.appendChild(camera);\n\n    this._viewportEl = viewport;\n    this._cameraEl = camera;\n    this._worldEl = world;\n\n    // EL's PARENT -> VIEWPORT -> CAMERA -> WORLD -> EL\n    element.parentElement!.insertBefore(viewport, element);\n    world.appendChild(element);\n  }\n\n  /**\n   * Focus a camera to given element.\n   * After focus, element will be in front of camera with no rotation applied.\n   * Also, it will have original width / height if neither [scale](#scale) nor [perspectiveOffset](#perspectiveOffset) is applied.\n   * This method won't work if any of element's parent except camera element has scale applied.\n   * @param - The element to focus. Can be HTMLElement or CSS selector.\n   * @return {CSSCamera} The instance itself\n   */\n  public focus(el: string | HTMLElement): this {\n    const element = getElement(el);\n    const focusMatrix = this._getFocusMatrix(element);\n\n    const rotation = quat.create();\n    const translation = vec3.create();\n    mat4.getRotation(rotation, focusMatrix);\n    mat4.getTranslation(translation, focusMatrix);\n\n    const eulerAngle = quatToEuler(rotation);\n\n    vec3.negate(eulerAngle, eulerAngle);\n\n    this._rotation = eulerAngle;\n    this._position = translation;\n    return this;\n  }\n\n  /**\n   * Translate a camera in its local coordinate space.\n   * For example, `camera.translateLocal(0, 0, -300)` will always move camera to direction where it's seeing.\n   * @param - Amount of horizontal translation, in px.\n   * @param - Amount of vertical translation, in px.\n   * @param - Amount of translation in view direction, in px.\n   * @return {CSSCamera} The instance itself\n   */\n  public translateLocal(x: number = 0, y: number = 0, z: number = 0): this {\n    const position = this._position;\n    const rotation = this._rotation;\n\n    const transVec = vec3.fromValues(x, y, z);\n    const rotQuat = quat.create();\n    quat.fromEuler(rotQuat, -rotation[0], -rotation[1], -rotation[2]);\n    vec3.transformQuat(transVec, transVec, rotQuat);\n\n    vec3.add(position, position, transVec);\n    return this;\n  }\n\n  /**\n   * Translate a camera in world(absolute) coordinate space.\n   * @param - Amount of translation in x axis, in px.\n   * @param - Amount of translation in y axis, in px.\n   * @param - Amount of translation in z axis, in px.\n   * @return {CSSCamera} The instance itself\n   */\n  public translate(x: number = 0, y: number = 0, z: number = 0): this {\n    vec3.add(this._position, this._position, vec3.fromValues(x, y, z));\n\n    return this;\n  }\n\n  /**\n   * Rotate a camera in world(absolute) coordinate space.\n   * @param - Amount of rotation in x axis, in degree.\n   * @param - Amount of rotation in y axis, in degree.\n   * @param - Amount of rotation in z axis, in degree.\n   * @return {CSSCamera} The instance itself\n   */\n  public rotate(x: number = 0, y: number = 0, z: number = 0): this {\n    vec3.add(this._rotation, this._rotation, vec3.fromValues(x, y, z));\n\n    return this;\n  }\n\n  /**\n   * Updates a camera CSS with given duration.\n   * Every other camera transforming properties / methods will be batched until this method is called.\n   * @example\n   * const camera = new CSSCamera(el);\n   * console.log(camera.cameraEl.style.transform); // ''\n   *\n   * camera.perspective = 300;\n   * camera.translate(0, 0, 300);\n   * camera.rotate(0, 90, 0);\n   * console.log(camera.cameraEl.style.transform); // '', Not changed!\n   *\n   * await camera.update(1000); // Camera style is updated.\n   * console.log(camera.cameraEl.style.transform); // scale3d(1, 1, 1) translateZ(300px) rotateX(0deg) rotateY(90deg) rotateZ(0deg)\n   *\n   * // When if you want to apply multiple properties\n   * camera.update(1000, {\n   *   property: \"transform, background-color\",\n   *   timingFunction: \"ease-out, ease-out\", // As same with CSS, you should assign values to each property\n   *   delay: \"0ms, 100ms\"\n   * });\n   * @param - Transition duration in ms.\n   * @param {Partial<UpdateOption>} [options] Transition options.\n   * @param {string} [options.property=\"transform\"] CSS [transition-property](https://developer.mozilla.org/en-US/docs/Web/CSS/transition-property) to apply.\n   * @param {string} [options.timingFunction=\"ease-out\"] CSS [transition-timing-function](https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function) to apply.\n   * @param {string} [options.delay=\"0ms\"] CSS [transition-delay](https://developer.mozilla.org/en-US/docs/Web/CSS/transition-delay) to apply.\n   * @return {Promise<CSSCamera>} A promise resolving instance itself\n   */\n  public async update(duration: number = 0, options: Partial<UpdateOption> = {}): Promise<this> {\n    applyCSS(this._viewportEl, { perspective: `${this.perspective}px` });\n    applyCSS(this._cameraEl, { transform: this.cameraCSS });\n    applyCSS(this._worldEl, { transform: this.worldCSS });\n\n    const updateOptions = assign(assign({}, DEFAULT.UPDATE_OPTIONS), options) as UpdateOption;\n\n    if (duration > 0) {\n      if (this._updateTimer > 0) {\n        window.clearTimeout(this._updateTimer);\n      }\n\n      const transitionDuration = `${duration}ms`;\n      const updateOption = Object.keys(updateOptions).reduce((option: {[key: string]: ValueOf<UpdateOption>}, key) => {\n        option[`transition${key.charAt(0).toUpperCase() + key.slice(1)}`] = updateOptions[key as keyof UpdateOption]!;\n        return option;\n      }, {});\n\n      const finalOption = {\n        transitionDuration,\n        ...updateOption,\n      };\n\n      [this._viewportEl, this._cameraEl, this._worldEl].forEach(el => {\n        applyCSS(el, finalOption);\n      });\n    }\n\n    return new Promise(resolve => {\n      // Make sure to use requestAnimationFrame even if duration is 0\n      // To make sure DOM is updated, for successive update() calls.\n      if (duration > 0) {\n        this._updateTimer = window.setTimeout(() => {\n          // Reset transition values\n          [this._viewportEl, this._cameraEl, this._worldEl].forEach(el => {\n            applyCSS(el, { transition: '' });\n          });\n          this._updateTimer = -1;\n          resolve();\n        }, duration);\n      } else {\n        requestAnimationFrame(() => {\n          resolve();\n        });\n      }\n    });\n  }\n\n  private _getFocusMatrix(element: HTMLElement): mat4 {\n    const elements: HTMLElement[] = [];\n    while (element) {\n      elements.push(element);\n      if (element === this._element) break;\n      element = element.parentElement!;\n    }\n\n    // Order by shallow to deep\n    elements.reverse();\n\n    const elStyles = elements.map(el => window.getComputedStyle(el));\n\n    // Find first element that transform-style is not preserve-3d\n    // As all childs of that element is affected by its matrix\n    const firstFlatIndex = findIndex(elStyles, style => style.transformStyle !== 'preserve-3d');\n    if (firstFlatIndex > 0) { // el doesn't have to be preserve-3d'ed\n      elStyles.splice(firstFlatIndex + 1);\n    }\n\n    let parentOffset: Offset = {\n      left: 0,\n      top: 0,\n      width: this.viewportEl.offsetWidth,\n      height: this.viewportEl.offsetHeight,\n    };\n\n    // Accumulated rotation\n    const accRotation = quat.identity(quat.create());\n    // Assume center of screen as (0, 0, 0)\n    const centerPos = vec3.fromValues(0, 0, 0);\n\n    elStyles.forEach((style, idx) => {\n      const el = elements[idx];\n      const currentOffset = {\n        left: el.offsetLeft,\n        top: el.offsetTop,\n        width: el.offsetWidth,\n        height: el.offsetHeight,\n      };\n      const transformMat = getTransformMatrix(style);\n      const offsetFromParent = getOffsetFromParent(currentOffset, parentOffset);\n      vec3.transformQuat(offsetFromParent, offsetFromParent, accRotation);\n\n      vec3.add(centerPos, centerPos, offsetFromParent);\n\n      const rotateOffset = getRotateOffset(style, currentOffset);\n      vec3.transformQuat(rotateOffset, rotateOffset, accRotation);\n\n      const transformOrigin = vec3.clone(centerPos);\n      vec3.add(transformOrigin, transformOrigin, rotateOffset);\n\n      const centerFromOrigin = vec3.create();\n      vec3.sub(centerFromOrigin, centerPos, transformOrigin);\n\n      const invAccRotation = quat.invert(quat.create(), accRotation);\n      vec3.transformQuat(centerFromOrigin, centerFromOrigin, invAccRotation);\n      vec3.transformMat4(centerFromOrigin, centerFromOrigin, transformMat);\n      vec3.transformQuat(centerFromOrigin, centerFromOrigin, accRotation);\n\n      const newCenterPos = vec3.add(vec3.create(), transformOrigin, centerFromOrigin);\n      const rotation = mat4.getRotation(quat.create(), transformMat);\n\n      vec3.copy(centerPos, newCenterPos);\n      quat.mul(accRotation, accRotation, rotation);\n      parentOffset = currentOffset;\n    });\n\n    const perspective = vec3.fromValues(0, 0, this.perspective);\n    vec3.transformQuat(perspective, perspective, accRotation);\n    vec3.add(centerPos, centerPos, perspective);\n\n    const matrix = mat4.create();\n    mat4.fromRotationTranslation(matrix, accRotation, centerPos);\n\n    return matrix;\n  }\n}\n\nexport default CSSCamera;\n"],"names":["getElement","el","baseElement","queryResult","querySelector","document","Error","selector","ELEMENT_NOT_EXIST","nodeName","nodeType","received","MUST_STRING_OR_ELEMENT","applyCSS","element","cssObj","Object","keys","forEach","property","style","assign","target","_i","srcs","source","key","value","quatToEuler","q","rotM","mat4","create","fromQuat","m11","m12","m21","m22","m31","m32","m33","euler","vec3","Math","asin","val","min","max","clamp","abs","atan2","map","rad","PI","radToDeg","STYLE","width","height","overflow","CLASS","OPTIONS","position","scale","rotation","perspective","rotateOffset","UPDATE_OPTIONS","timingFunction","delay","options","_element","op","DEFAULT","_position","fromValues","_scale","_rotation","_perspective","_rotateOffset","_updateTimer","this","viewport","createElement","camera","cloneNode","world","className","appendChild","_viewportEl","_cameraEl","_worldEl","parentElement","insertBefore","CSSCamera","r","quat","fromEuler","focusMatrix","_getFocusMatrix","translation","getRotation","getTranslation","eulerAngle","negate","x","y","z","transVec","rotQuat","transformQuat","add","duration","Promise","transform","cameraCSS","worldCSS","updateOptions","window","clearTimeout","transitionDuration","updateOption","reduce","option","charAt","toUpperCase","slice","finalOption_1","resolve","_this","setTimeout","transition","requestAnimationFrame","elements","push","reverse","elStyles","getComputedStyle","firstFlatIndex","iterable","callback","i","length","findIndex","transformStyle","splice","parentOffset","left","top","viewportEl","offsetWidth","offsetHeight","accRotation","identity","centerPos","idx","currentOffset","offsetLeft","offsetTop","transformMat","elStyle","trVal","getPropertyValue","transformStr","exec","matrixVal","split","parseFloat","matrix","getTransformMatrix","offsetFromParent","getOffsetFromParent","axis","transformOrigin","str","substring","ax","ay","getRotateOffset","clone","centerFromOrigin","sub","invAccRotation","invert","transformMat4","newCenterPos","copy","mul","fromRotationTranslation"],"mappings":"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"}