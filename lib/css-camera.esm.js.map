{"version":3,"file":"css-camera.esm.js","sources":["../src/constants/error.ts","../src/utils/helper.ts","../src/utils/math.ts","../src/constants/default.ts","../src/CSSCamera.ts"],"sourcesContent":["export const ELEMENT_NOT_EXIST = (selector: string) => `Element with selector \"${selector}\" doesn't exist.`;\nexport const MUST_STRING_OR_ELEMENT = (received: any) => `Element should be provided in string or HTMLElement. Received: ${received}`;\n","import { mat4, vec3 } from 'gl-matrix';\nimport { ELEMENT_NOT_EXIST, MUST_STRING_OR_ELEMENT } from '../constants/error';\nimport { Matrix4x4, Offset } from '../types';\n\nexport const getElement = (el: string | HTMLElement, baseElement?: HTMLElement): HTMLElement => {\n    if (typeof el === 'string') {\n        const queryResult = baseElement\n          ? baseElement.querySelector(el)\n          : document.querySelector(el);\n        if (!queryResult) {\n            throw new Error(ELEMENT_NOT_EXIST(el));\n        }\n        return queryResult as HTMLElement;\n    } else if (el.nodeName && el.nodeType === 1) {\n        return el;\n    } else {\n        throw new Error(MUST_STRING_OR_ELEMENT(el));\n    }\n};\n\nexport function applyCSS(element: HTMLElement, cssObj: { [keys: string]: string }): void {\n  Object.keys(cssObj).forEach(property => {\n    (element.style as any)[property] = cssObj[property];\n  });\n}\n\nexport function getTransformMatrix(elStyle: CSSStyleDeclaration): mat4 {\n  const trVal = elStyle.getPropertyValue('transform');\n  const transformStr = /\\(((\\s|\\S)+)\\)/.exec(trVal);\n  const matrixVal = transformStr\n    ? transformStr[1].split(',').map(val => parseFloat(val)) as Matrix4x4\n    : [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1] as Matrix4x4;\n  if (matrixVal.length === 16 ) {\n    return mat4.fromValues(...matrixVal);\n  } else {\n    // Convert 2d matrix(length 6) to 3d\n    const matrix = mat4.create();\n    mat4.identity(matrix);\n\n    matrix[0] = matrixVal[0];\n    matrix[1] = matrixVal[1];\n    matrix[4] = matrixVal[2];\n    matrix[5] = matrixVal[3];\n    matrix[12] = matrixVal[4];\n    matrix[13] = matrixVal[5];\n\n    return matrix;\n  }\n}\n\nexport function getOffsetFromParent(currentOffset: Offset, parentOffset: Offset): vec3 {\n  const offsetLeft = currentOffset.left + (currentOffset.width - parentOffset.width) / 2;\n  const offsetTop = currentOffset.top + (currentOffset.height - parentOffset.height) / 2;\n\n  return vec3.fromValues(offsetLeft, offsetTop, 0);\n}\n\nexport function getRotateOffset(elStyle: CSSStyleDeclaration, currentOffset: Offset): vec3 {\n  const axis = (elStyle.transformOrigin as string)\n    .split(' ')\n    .map(str => parseFloat(str.substring(0, str.length - 2)));\n  const ax = axis[0] - currentOffset.width / 2;\n  const ay = axis[1] - currentOffset.height / 2;\n\n  return vec3.fromValues(ax, ay, 0);\n}\n\nexport function findIndex<T>(iterable: T[], callback: (el: T) => boolean): number {\n  for (let i = 0; i < iterable.length; i += 1) {\n    const element = iterable[i];\n    if (element && callback(element)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n// return [0, 1, ...., max - 1]\nexport function range(max: number): number[] {\n  const counterArray: number[] = [];\n  for (let i = 0; i < max; i += 1) {\n    counterArray[i] = i;\n  }\n  return counterArray;\n}\n\nexport function clamp(val: number, min: number, max: number): number {\n  return Math.max(Math.min(val, max), min);\n}\n\nexport function assign(target: object, ...srcs: object[]): object {\n  srcs.forEach(source => {\n    Object.keys(source).forEach(key => {\n      const value = (source as any)[key];\n      (target as any)[key] = value;\n    });\n  });\n\n  return target;\n}\n","import { mat4, quat, vec3 } from 'gl-matrix';\nimport { clamp } from './helper';\n\nexport function degToRad(deg: number): number {\n  return Math.PI * deg / 180;\n}\n\nexport function radToDeg(rad: number): number {\n  return 180 * rad / Math.PI;\n}\n\n// From Three.js https://github.com/mrdoob/three.js/blob/dev/src/math/Euler.js\nexport function quatToEuler(q: quat): vec3 {\n  const rotM = mat4.create();\n  mat4.fromQuat(rotM, q);\n\n  const m11 = rotM[0];\n  const m12 = rotM[4];\n  // const m13 = rotM[8];\n  const m21 = rotM[1];\n  const m22 = rotM[5];\n  // const m23 = rotM[9];\n  const m31 = rotM[2];\n  const m32 = rotM[6];\n  const m33 = rotM[10];\n\n  const euler = vec3.create();\n\n  // ZYX\n  euler[1] = Math.asin(-clamp(m31, -1, 1));\n  if (Math.abs(m31) < 0.99999) {\n    euler[0] = Math.atan2(m32, m33);\n    euler[2] = Math.atan2(m21, m11);\n  } else {\n    euler[0] = 0;\n    euler[2] = Math.atan2(-m12, m22);\n  }\n\n  return euler.map(val => radToDeg(val)) as vec3;\n}\n","export const STYLE = {\n  VIEWPORT: {\n    width: '100%',\n    height: '100%',\n    'transform-style': 'preserve-3d',\n    overflow: 'hidden',\n  },\n  CAMERA: {\n    width: '100%',\n    height: '100%',\n    'transform-style': 'preserve-3d',\n    'will-change': 'transform',\n  },\n  WORLD: {\n    width: '100%',\n    height: '100%',\n    'transform-style': 'preserve-3d',\n    'will-change': 'transform',\n  },\n};\n\nexport const CLASS = {\n  VIEWPORT: 'cc-viewport',\n  CAMERA: 'cc-camera',\n  WORLD: 'cc-world',\n};\n\nexport const OPTIONS = {\n  position: [0, 0, 0],\n  scale: [1, 1, 1],\n  rotation: [0, 0, 0],\n  perspective: 0,\n  rotateOffset: 0,\n};\n\nexport const UPDATE_OPTIONS = {\n  property: 'transform',\n  timingFunction: 'ease-out',\n  delay: '0ms',\n};\n","import { mat4, vec3, quat } from 'gl-matrix';\nimport { getElement, applyCSS, getTransformMatrix, findIndex, getOffsetFromParent, getRotateOffset, assign } from './utils/helper';\nimport { quatToEuler } from './utils/math';\nimport * as DEFAULT from './constants/default';\nimport { Offset, UpdateOption, ValueOf, Options } from './types';\n\nclass CSSCamera {\n  private _element: HTMLElement;\n  private _viewportEl: HTMLElement;\n  private _cameraEl: HTMLElement;\n  private _worldEl: HTMLElement;\n\n  private _position: vec3;\n  private _scale: vec3;\n  private _rotation: vec3;\n  private _perspective: number;\n  private _rotateOffset: number;\n  private _updateTimer: number;\n\n  /**\n   * Current version of CSSCamera.\n   * @example\n   * console.log(CSSCamera.VERSION); // ex) 1.0.0\n   * @type {string}\n   */\n  static get VERSION() { return '#__VERSION__#'; }\n\n  /**\n   * The element provided in the constructor.\n   * @example\n   * const camera = new CSSCamera(el);\n   * console.log(camera.element === el); // true\n   * @type {HTMLElement}\n   */\n  public get element() { return this._element; }\n\n  /**\n   * The reference of viewport DOM element.\n   * @type {HTMLElement}\n   */\n  public get viewportEl() { return this._viewportEl; }\n\n  /**\n   * The reference of camera DOM element.\n   * @type {HTMLElement}\n   */\n  public get cameraEl() { return this._cameraEl; }\n\n  /**\n   * The reference of world DOM element.\n   * @type {HTMLElement}\n   */\n  public get worldEl() { return this._worldEl; }\n\n  /**\n   * The current position as number array([x, y, z]).\n   * @example\n   * const camera = new CSSCamera(el);\n   * console.log(camera.position); // [0, 0, 0];\n   * camera.position = [0, 0, 300];\n   * console.log(camera.position); // [0, 0, 300];\n   * @type {number[]}\n   */\n  public get position() { return [...this._position]; }\n\n  /**\n   * The current scale as number array([x, y, z]).\n   * @example\n   * const camera = new CSSCamera(el);\n   * console.log(camera.scale); // [1, 1, 1];\n   * camera.scale = [5, 1, 1];\n   * console.log(camera.scale); // [5, 1, 1];\n   * @type {number[]}\n   */\n  public get scale() { return [...this._scale]; }\n\n  /**\n   * The current Euler rotation angles in degree as number array([x, y, z]).\n   * @example\n   * const camera = new CSSCamera(el);\n   * console.log(camera.rotation); // [0, 0, 0];\n   * camera.rotation = [90, 0, 0];\n   * console.log(camera.rotation); // [90, 0, 0];\n   * @type {number[]}\n   */\n  public get rotation() { return [...this._rotation]; }\n\n  /**\n   * The current quaternion rotation as number array([x, y, z, w]).\n   * @example\n   * const camera = new CSSCamera(el);\n   * console.log(camera.quaternion); // [0, 0, 0, 1];\n   * camera.rotation = [90, 0, 0];\n   * console.log(camera.quaternion); // [0.7071067690849304, 0, 0, 0.7071067690849304];\n   * camera.quaternion = [0, 0, 0, 1];\n   * console.log(camera.rotation); // [0, -0, 0];\n   * @type {number[]}\n   */\n  public get quaternion() {\n    const r = this._rotation;\n    const quaternion = quat.fromEuler(quat.create(), r[0], r[1], r[2]);\n\n    return [...quaternion];\n  }\n\n  /**\n   * The current perspective value that will be applied to viewport element.\n   * @example\n   * const camera = new CSSCamera(el);\n   * camera.perspective = 300;\n   * console.log(camera.perspective); // 300\n   * @type {number}\n   */\n  public get perspective() { return this._perspective; }\n\n  /**\n   * The current rotate offset value that will be applied to camera element.\n   * The camera will be as far away from the focal point as this value.\n   * |![rot0](https://woodneck.github.io/css-camera/asset/rot0.gif)|![rot150](https://woodneck.github.io/css-camera/asset/rot150.gif)|\n   * |:---:|:---:|\n   * @example\n   * const camera = new CSSCamera(el);\n   * camera.perspective = 300;\n   * console.log(camera.cameraCSS); // scale3d(1, 1, 1) translateZ(300px) rotateX(0deg) rotateY(0deg) rotateZ(0deg);\n   * camera.rotateOffset = 100;\n   * console.log(camera.cameraCSS); // scale3d(1, 1, 1) translateZ(400px) rotateX(0deg) rotateY(0deg) rotateZ(0deg);\n   * @type {number}\n   */\n  public get rotateOffset() { return this._rotateOffset; }\n\n  /**\n   * CSS string can be applied to camera element based on current transform.\n   * @example\n   * const camera = new CSSCamera(el);\n   * camera.perspective = 300;\n   * console.log(camera.cameraCSS); // scale3d(1, 1, 1) translateZ(300px) rotateX(0deg) rotateY(0deg) rotateZ(0deg);\n   * @type {string}\n   */\n  public get cameraCSS() {\n    const perspective = this._perspective;\n    const rotateOffset = this._rotateOffset;\n    const rotation = this._rotation;\n    const scale = this._scale;\n\n    // Rotate in order of Z - Y - X\n    // tslint:disable-next-line: max-line-length\n    return `scale3d(${scale[0]}, ${scale[1]}, ${scale[2]}) translateZ(${perspective - rotateOffset}px) rotateX(${rotation[0]}deg) rotateY(${rotation[1]}deg) rotateZ(${rotation[2]}deg)`;\n  }\n\n  /**\n   * CSS string can be applied to world element based on current transform.\n   * ```\n   * const camera = new CSSCamera(el);\n   * console.log(camera.worldCSS); // \"translate3d(0px, 0px, 0px)\";\n   * camera.translate(0, 0, 300);\n   * console.log(camera.worldCSS); // \"translate3d(0px, 0px, -300px)\";\n   * ```\n   * @type {string}\n   */\n  public get worldCSS() {\n    const position = this._position;\n\n    return `translate3d(${-position[0]}px, ${-position[1]}px, ${-position[2]}px)`;\n  }\n\n  public set position(val: number[]) { this._position = vec3.fromValues(val[0], val[1], val[2]); }\n  public set scale(val: number[]) { this._scale = vec3.fromValues(val[0], val[1], val[2]); }\n  public set rotation(val: number[]) { this._rotation = vec3.fromValues(val[0], val[1], val[2]); }\n  public set quaternion(val: number[]) { this._rotation = quatToEuler(quat.fromValues(val[0], val[1], val[2], val[3])); }\n  public set perspective(val: number) { this._perspective = val; }\n  public set rotateOffset(val: number) { this._rotateOffset = val; }\n\n  /**\n   * Create new CSSCamera with given element / selector.\n   * @param - The element to apply camera. Can be HTMLElement or CSS selector.\n   * @param {Partial<Options>} [options] Camera options\n   * @param {number[]} [options.position=[0, 0, 0]] Initial position of the camera.\n   * @param {number[]} [options.scale=[1, 1, 1]] Initial scale of the camera.\n   * @param {number[]} [options.rotation=[0, 0, 0]] Initial Euler rotation angles(x, y, z) of the camera in degree.\n   * @param {number} [options.perspective=0] Initial perspective of the camera.\n   * @param {number} [options.rotateOffset=0] Initial rotate offset of the camera.\n   * @example\n   * const camera = new CSSCamera(\"#el\", {\n   *   position: [0, 0, 150], // Initial pos(x, y, z)\n   *   rotation: [90, 0, 0],  // Initial rotation(x, y, z, in degree)\n   *   perspective: 300       // CSS \"perspective\" value to apply\n   * });\n   */\n  constructor(el: string | HTMLElement, options: Partial<Options> = {}) {\n    this._element = getElement(el);\n\n    const op = assign(assign({}, DEFAULT.OPTIONS), options) as Options;\n\n    this._position = vec3.fromValues(op.position[0], op.position[1], op.position[2]);\n    this._scale = vec3.fromValues(op.scale[0], op.scale[1], op.scale[2]);\n    this._rotation = vec3.fromValues(op.rotation[0], op.rotation[1], op.rotation[2]);\n    this._perspective = op.perspective;\n    this._rotateOffset = op.rotateOffset;\n    this._updateTimer = -1;\n\n    const element = this._element;\n    const viewport = document.createElement('div');\n    const camera = viewport.cloneNode() as HTMLElement;\n    const world = viewport.cloneNode() as HTMLElement;\n\n    viewport.className = DEFAULT.CLASS.VIEWPORT;\n    camera.className = DEFAULT.CLASS.CAMERA;\n    world.className = DEFAULT.CLASS.WORLD;\n\n    applyCSS(viewport, DEFAULT.STYLE.VIEWPORT);\n    applyCSS(camera, DEFAULT.STYLE.CAMERA);\n    applyCSS(world, DEFAULT.STYLE.WORLD);\n\n    camera.appendChild(world);\n    viewport.appendChild(camera);\n\n    this._viewportEl = viewport;\n    this._cameraEl = camera;\n    this._worldEl = world;\n\n    // EL's PARENT -> VIEWPORT -> CAMERA -> WORLD -> EL\n    element.parentElement!.insertBefore(viewport, element);\n    world.appendChild(element);\n\n    this.update(0);\n  }\n\n  /**\n   * Focus a camera to given element.\n   * After focus, element will be in front of camera with no rotation applied.\n   * Also, it will have original width / height if neither [scale](#scale) nor [perspectiveOffset](#perspectiveOffset) is applied.\n   * This method won't work if any of element's parent except camera element has scale applied.\n   * @param - The element to focus. Can be HTMLElement or CSS selector.\n   * @return {CSSCamera} The instance itself\n   */\n  public focus(el: string | HTMLElement): this {\n    const element = getElement(el);\n    const focusMatrix = this._getFocusMatrix(element);\n\n    const rotation = quat.create();\n    const translation = vec3.create();\n    mat4.getRotation(rotation, focusMatrix);\n    mat4.getTranslation(translation, focusMatrix);\n\n    const eulerAngle = quatToEuler(rotation);\n\n    vec3.negate(eulerAngle, eulerAngle);\n\n    this._rotation = eulerAngle;\n    this._position = translation;\n    return this;\n  }\n\n  /**\n   * Translate a camera in its local coordinate space.\n   * For example, `camera.translateLocal(0, 0, -300)` will always move camera to direction where it's seeing.\n   * @param - Amount of horizontal translation, in px.\n   * @param - Amount of vertical translation, in px.\n   * @param - Amount of translation in view direction, in px.\n   * @return {CSSCamera} The instance itself\n   */\n  public translateLocal(x: number = 0, y: number = 0, z: number = 0): this {\n    const position = this._position;\n    const rotation = this._rotation;\n\n    const transVec = vec3.fromValues(x, y, z);\n    const rotQuat = quat.create();\n    quat.fromEuler(rotQuat, -rotation[0], -rotation[1], -rotation[2]);\n    vec3.transformQuat(transVec, transVec, rotQuat);\n\n    vec3.add(position, position, transVec);\n    return this;\n  }\n\n  /**\n   * Translate a camera in world(absolute) coordinate space.\n   * @param - Amount of translation in x axis, in px.\n   * @param - Amount of translation in y axis, in px.\n   * @param - Amount of translation in z axis, in px.\n   * @return {CSSCamera} The instance itself\n   */\n  public translate(x: number = 0, y: number = 0, z: number = 0): this {\n    vec3.add(this._position, this._position, vec3.fromValues(x, y, z));\n\n    return this;\n  }\n\n  /**\n   * Rotate a camera in world(absolute) coordinate space.\n   * @param - Amount of rotation in x axis, in degree.\n   * @param - Amount of rotation in y axis, in degree.\n   * @param - Amount of rotation in z axis, in degree.\n   * @return {CSSCamera} The instance itself\n   */\n  public rotate(x: number = 0, y: number = 0, z: number = 0): this {\n    vec3.add(this._rotation, this._rotation, vec3.fromValues(x, y, z));\n\n    return this;\n  }\n\n  /**\n   * Updates a camera CSS with given duration.\n   * Every other camera transforming properties / methods will be batched until this method is called.\n   * @example\n   * const camera = new CSSCamera(el);\n   * console.log(camera.cameraEl.style.transform); // ''\n   *\n   * camera.perspective = 300;\n   * camera.translate(0, 0, 300);\n   * camera.rotate(0, 90, 0);\n   * console.log(camera.cameraEl.style.transform); // '', Not changed!\n   *\n   * await camera.update(1000); // Camera style is updated.\n   * console.log(camera.cameraEl.style.transform); // scale3d(1, 1, 1) translateZ(300px) rotateX(0deg) rotateY(90deg) rotateZ(0deg)\n   *\n   * // When if you want to apply multiple properties\n   * camera.update(1000, {\n   *   property: \"transform, background-color\",\n   *   timingFunction: \"ease-out, ease-out\", // As same with CSS, you should assign values to each property\n   *   delay: \"0ms, 100ms\"\n   * });\n   * @param - Transition duration in ms.\n   * @param {Partial<UpdateOption>} [options] Transition options.\n   * @param {string} [options.property=\"transform\"] CSS [transition-property](https://developer.mozilla.org/en-US/docs/Web/CSS/transition-property) to apply.\n   * @param {string} [options.timingFunction=\"ease-out\"] CSS [transition-timing-function](https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function) to apply.\n   * @param {string} [options.delay=\"0ms\"] CSS [transition-delay](https://developer.mozilla.org/en-US/docs/Web/CSS/transition-delay) to apply.\n   * @return {Promise<CSSCamera>} A promise resolving instance itself\n   */\n  public async update(duration: number = 0, options: Partial<UpdateOption> = {}): Promise<this> {\n    applyCSS(this._viewportEl, { perspective: `${this.perspective}px` });\n    applyCSS(this._cameraEl, { transform: this.cameraCSS });\n    applyCSS(this._worldEl, { transform: this.worldCSS });\n\n    const updateOptions = assign(assign({}, DEFAULT.UPDATE_OPTIONS), options) as UpdateOption;\n\n    if (duration > 0) {\n      if (this._updateTimer > 0) {\n        window.clearTimeout(this._updateTimer);\n      }\n\n      const transitionDuration = `${duration}ms`;\n      const updateOption = Object.keys(updateOptions).reduce((option: {[key: string]: ValueOf<UpdateOption>}, key) => {\n        option[`transition${key.charAt(0).toUpperCase() + key.slice(1)}`] = updateOptions[key as keyof UpdateOption]!;\n        return option;\n      }, {});\n\n      const finalOption = {\n        transitionDuration,\n        ...updateOption,\n      };\n\n      [this._viewportEl, this._cameraEl, this._worldEl].forEach(el => {\n        applyCSS(el, finalOption);\n      });\n    }\n\n    return new Promise(resolve => {\n      // Make sure to use requestAnimationFrame even if duration is 0\n      // To make sure DOM is updated, for successive update() calls.\n      if (duration > 0) {\n        this._updateTimer = window.setTimeout(() => {\n          // Reset transition values\n          [this._viewportEl, this._cameraEl, this._worldEl].forEach(el => {\n            applyCSS(el, { transition: '' });\n          });\n          this._updateTimer = -1;\n          resolve();\n        }, duration);\n      } else {\n        requestAnimationFrame(() => {\n          resolve();\n        });\n      }\n    });\n  }\n\n  private _getFocusMatrix(element: HTMLElement): mat4 {\n    const elements: HTMLElement[] = [];\n    while (element) {\n      elements.push(element);\n      if (element === this._element) break;\n      element = element.parentElement!;\n    }\n\n    // Order by shallow to deep\n    elements.reverse();\n\n    const elStyles = elements.map(el => window.getComputedStyle(el));\n\n    // Find first element that transform-style is not preserve-3d\n    // As all childs of that element is affected by its matrix\n    const firstFlatIndex = findIndex(elStyles, style => style.transformStyle !== 'preserve-3d');\n    if (firstFlatIndex > 0) { // el doesn't have to be preserve-3d'ed\n      elStyles.splice(firstFlatIndex + 1);\n    }\n\n    let parentOffset: Offset = {\n      left: 0,\n      top: 0,\n      width: this.viewportEl.offsetWidth,\n      height: this.viewportEl.offsetHeight,\n    };\n\n    // Accumulated rotation\n    const accRotation = quat.identity(quat.create());\n    // Assume center of screen as (0, 0, 0)\n    const centerPos = vec3.fromValues(0, 0, 0);\n\n    elStyles.forEach((style, idx) => {\n      const el = elements[idx];\n      const currentOffset = {\n        left: el.offsetLeft,\n        top: el.offsetTop,\n        width: el.offsetWidth,\n        height: el.offsetHeight,\n      };\n      const transformMat = getTransformMatrix(style);\n      const offsetFromParent = getOffsetFromParent(currentOffset, parentOffset);\n      vec3.transformQuat(offsetFromParent, offsetFromParent, accRotation);\n\n      vec3.add(centerPos, centerPos, offsetFromParent);\n\n      const rotateOffset = getRotateOffset(style, currentOffset);\n      vec3.transformQuat(rotateOffset, rotateOffset, accRotation);\n\n      const transformOrigin = vec3.clone(centerPos);\n      vec3.add(transformOrigin, transformOrigin, rotateOffset);\n\n      const centerFromOrigin = vec3.create();\n      vec3.sub(centerFromOrigin, centerPos, transformOrigin);\n\n      const invAccRotation = quat.invert(quat.create(), accRotation);\n      vec3.transformQuat(centerFromOrigin, centerFromOrigin, invAccRotation);\n      vec3.transformMat4(centerFromOrigin, centerFromOrigin, transformMat);\n      vec3.transformQuat(centerFromOrigin, centerFromOrigin, accRotation);\n\n      const newCenterPos = vec3.add(vec3.create(), transformOrigin, centerFromOrigin);\n      const rotation = mat4.getRotation(quat.create(), transformMat);\n\n      vec3.copy(centerPos, newCenterPos);\n      quat.mul(accRotation, accRotation, rotation);\n      parentOffset = currentOffset;\n    });\n\n    const perspective = vec3.fromValues(0, 0, this.perspective);\n    vec3.transformQuat(perspective, perspective, accRotation);\n    vec3.add(centerPos, centerPos, perspective);\n\n    const matrix = mat4.create();\n    mat4.fromRotationTranslation(matrix, accRotation, centerPos);\n\n    return matrix;\n  }\n}\n\nexport default CSSCamera;\n"],"names":["ELEMENT_NOT_EXIST","selector","MUST_STRING_OR_ELEMENT","received","getElement","el","baseElement","queryResult","querySelector","document","Error","nodeName","nodeType","applyCSS","element","cssObj","Object","keys","forEach","property","style","getTransformMatrix","elStyle","trVal","getPropertyValue","transformStr","exec","matrixVal","split","map","val","parseFloat","length","mat4","fromValues","matrix","create","identity","getOffsetFromParent","currentOffset","parentOffset","offsetLeft","left","width","offsetTop","top","height","vec3","getRotateOffset","axis","transformOrigin","str","substring","ax","ay","findIndex","iterable","callback","i","clamp","min","max","Math","assign","target","_i","srcs","source","key","value","radToDeg","rad","PI","quatToEuler","q","rotM","fromQuat","m11","m12","m21","m22","m31","m32","m33","euler","asin","abs","atan2","STYLE","VIEWPORT","overflow","CAMERA","WORLD","CLASS","OPTIONS","position","scale","rotation","perspective","rotateOffset","UPDATE_OPTIONS","timingFunction","delay","options","_element","op","DEFAULT","_position","_scale","_rotation","_perspective","_rotateOffset","_updateTimer","viewport","createElement","camera","cloneNode","world","className","appendChild","_viewportEl","_cameraEl","_worldEl","parentElement","insertBefore","update","CSSCamera","r","quaternion","quat","fromEuler","focusMatrix","_getFocusMatrix","translation","getRotation","getTranslation","eulerAngle","negate","x","y","z","transVec","rotQuat","transformQuat","add","duration","Promise","transform","cameraCSS","worldCSS","updateOptions","window","clearTimeout","transitionDuration","updateOption","reduce","option","charAt","toUpperCase","slice","finalOption_1","resolve","_this","setTimeout","transition","requestAnimationFrame","elements","push","reverse","elStyles","getComputedStyle","firstFlatIndex","transformStyle","splice","viewportEl","offsetWidth","offsetHeight","accRotation","centerPos","idx","transformMat","offsetFromParent","clone","centerFromOrigin","sub","invAccRotation","invert","transformMat4","newCenterPos","copy","mul","fromRotationTranslation"],"mappings":"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"}